
// Generated by Cadence Encounter(R) RTL Compiler RC14.28 - v14.20-s067_1

// Verification Directory fv/alu1 

module or32(out, in0, in1);
  input [31:0] in0, in1;
  output [31:0] out;
  wire [31:0] in0, in1;
  wire [31:0] out;
  or2$ \gen_or[0].or_inst (.in0 (in0[0]), .in1 (in1[0]), .out (out[0]));
  or2$ \gen_or[1].or_inst (.in0 (in0[1]), .in1 (in1[1]), .out (out[1]));
  or2$ \gen_or[2].or_inst (.in0 (in0[2]), .in1 (in1[2]), .out (out[2]));
  or2$ \gen_or[3].or_inst (.in0 (in0[3]), .in1 (in1[3]), .out (out[3]));
  or2$ \gen_or[4].or_inst (.in0 (in0[4]), .in1 (in1[4]), .out (out[4]));
  or2$ \gen_or[5].or_inst (.in0 (in0[5]), .in1 (in1[5]), .out (out[5]));
  or2$ \gen_or[6].or_inst (.in0 (in0[6]), .in1 (in1[6]), .out (out[6]));
  or2$ \gen_or[7].or_inst (.in0 (in0[7]), .in1 (in1[7]), .out (out[7]));
  or2$ \gen_or[8].or_inst (.in0 (in0[8]), .in1 (in1[8]), .out (out[8]));
  or2$ \gen_or[9].or_inst (.in0 (in0[9]), .in1 (in1[9]), .out (out[9]));
  or2$ \gen_or[10].or_inst (.in0 (in0[10]), .in1 (in1[10]), .out
       (out[10]));
  or2$ \gen_or[11].or_inst (.in0 (in0[11]), .in1 (in1[11]), .out
       (out[11]));
  or2$ \gen_or[12].or_inst (.in0 (in0[12]), .in1 (in1[12]), .out
       (out[12]));
  or2$ \gen_or[13].or_inst (.in0 (in0[13]), .in1 (in1[13]), .out
       (out[13]));
  or2$ \gen_or[14].or_inst (.in0 (in0[14]), .in1 (in1[14]), .out
       (out[14]));
  or2$ \gen_or[15].or_inst (.in0 (in0[15]), .in1 (in1[15]), .out
       (out[15]));
  or2$ \gen_or[16].or_inst (.in0 (in0[16]), .in1 (in1[16]), .out
       (out[16]));
  or2$ \gen_or[17].or_inst (.in0 (in0[17]), .in1 (in1[17]), .out
       (out[17]));
  or2$ \gen_or[18].or_inst (.in0 (in0[18]), .in1 (in1[18]), .out
       (out[18]));
  or2$ \gen_or[19].or_inst (.in0 (in0[19]), .in1 (in1[19]), .out
       (out[19]));
  or2$ \gen_or[20].or_inst (.in0 (in0[20]), .in1 (in1[20]), .out
       (out[20]));
  or2$ \gen_or[21].or_inst (.in0 (in0[21]), .in1 (in1[21]), .out
       (out[21]));
  or2$ \gen_or[22].or_inst (.in0 (in0[22]), .in1 (in1[22]), .out
       (out[22]));
  or2$ \gen_or[23].or_inst (.in0 (in0[23]), .in1 (in1[23]), .out
       (out[23]));
  or2$ \gen_or[24].or_inst (.in0 (in0[24]), .in1 (in1[24]), .out
       (out[24]));
  or2$ \gen_or[25].or_inst (.in0 (in0[25]), .in1 (in1[25]), .out
       (out[25]));
  or2$ \gen_or[26].or_inst (.in0 (in0[26]), .in1 (in1[26]), .out
       (out[26]));
  or2$ \gen_or[27].or_inst (.in0 (in0[27]), .in1 (in1[27]), .out
       (out[27]));
  or2$ \gen_or[28].or_inst (.in0 (in0[28]), .in1 (in1[28]), .out
       (out[28]));
  or2$ \gen_or[29].or_inst (.in0 (in0[29]), .in1 (in1[29]), .out
       (out[29]));
  or2$ \gen_or[30].or_inst (.in0 (in0[30]), .in1 (in1[30]), .out
       (out[30]));
  or2$ \gen_or[31].or_inst (.in0 (in0[31]), .in1 (in1[31]), .out
       (out[31]));
endmodule

module zero8(in, out);
  input [7:0] in;
  output out;
  wire [7:0] in;
  wire out;
  wire n_0, n_1, n_2, n_3, n_4, n_5;
  nor2$ g104(.in0 (n_5), .in1 (n_4), .out (out));
  nand2$ g105(.in0 (n_0), .in1 (n_2), .out (n_5));
  nand2$ g106(.in0 (n_3), .in1 (n_1), .out (n_4));
  nor2$ g107(.in0 (in[3]), .in1 (in[2]), .out (n_3));
  nor2$ g110(.in0 (in[5]), .in1 (in[4]), .out (n_2));
  nor2$ g108(.in0 (in[1]), .in1 (in[0]), .out (n_1));
  nor2$ g109(.in0 (in[7]), .in1 (in[6]), .out (n_0));
endmodule

module zero16(in, out);
  input [15:0] in;
  output out;
  wire [15:0] in;
  wire out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9;
  nor2$ g242(.in0 (n_9), .in1 (n_8), .out (out));
  nand4$ g243(.in0 (n_1), .in1 (n_5), .in2 (n_3), .in3 (n_4), .out
       (n_9));
  nand4$ g244(.in0 (n_7), .in1 (n_0), .in2 (n_2), .in3 (n_6), .out
       (n_8));
  nor2$ g250(.in0 (in[3]), .in1 (in[2]), .out (n_7));
  nor2$ g245(.in0 (in[1]), .in1 (in[0]), .out (n_6));
  nor2$ g251(.in0 (in[13]), .in1 (in[12]), .out (n_5));
  nor2$ g252(.in0 (in[9]), .in1 (in[8]), .out (n_4));
  nor2$ g246(.in0 (in[15]), .in1 (in[14]), .out (n_3));
  nor2$ g247(.in0 (in[7]), .in1 (in[6]), .out (n_2));
  nor2$ g248(.in0 (in[11]), .in1 (in[10]), .out (n_1));
  nor2$ g249(.in0 (in[5]), .in1 (in[4]), .out (n_0));
endmodule

module zero32(in, out);
  input [31:0] in;
  output out;
  wire [31:0] in;
  wire out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9;
  nor2$ g546(.in0 (n_9), .in1 (n_8), .out (out));
  nand4$ g547(.in0 (n_0), .in1 (n_5), .in2 (n_3), .in3 (n_2), .out
       (n_9));
  nand4$ g548(.in0 (n_1), .in1 (n_4), .in2 (n_6), .in3 (n_7), .out
       (n_8));
  nor4$ g556(.in0 (in[1]), .in1 (in[2]), .in2 (in[3]), .in3 (in[0]),
       .out (n_7));
  nor4$ g549(.in0 (in[13]), .in1 (in[14]), .in2 (in[15]), .in3
       (in[12]), .out (n_6));
  nor4$ g552(.in0 (in[25]), .in1 (in[26]), .in2 (in[27]), .in3
       (in[24]), .out (n_5));
  nor4$ g553(.in0 (in[9]), .in1 (in[10]), .in2 (in[11]), .in3 (in[8]),
       .out (n_4));
  nor4$ g550(.in0 (in[29]), .in1 (in[30]), .in2 (in[31]), .in3
       (in[28]), .out (n_3));
  nor4$ g554(.in0 (in[17]), .in1 (in[18]), .in2 (in[19]), .in3
       (in[16]), .out (n_2));
  nor4$ g555(.in0 (in[5]), .in1 (in[6]), .in2 (in[7]), .in3 (in[4]),
       .out (n_1));
  nor4$ g551(.in0 (in[21]), .in1 (in[22]), .in2 (in[23]), .in3
       (in[20]), .out (n_0));
endmodule

module parity(in, out);
  input [7:0] in;
  output out;
  wire [7:0] in;
  wire out;
  wire n_0, n_1, n_2, n_3, n_4, n_5;
  xnor2$ g164(.in0 (n_4), .in1 (n_5), .out (out));
  xnor2$ g165(.in0 (n_1), .in1 (n_0), .out (n_5));
  xnor2$ g166(.in0 (n_3), .in1 (n_2), .out (n_4));
  xnor2$ g168(.in0 (in[6]), .in1 (in[1]), .out (n_3));
  xnor2$ g169(.in0 (in[5]), .in1 (in[3]), .out (n_2));
  xnor2$ g167(.in0 (in[7]), .in1 (in[0]), .out (n_1));
  xnor2$ g170(.in0 (in[4]), .in1 (in[2]), .out (n_0));
endmodule

module mux_nbit_4x1_N6(a0, a1, a2, a3, sel, out);
  input [5:0] a0, a1, a2, a3;
  input [1:0] sel;
  output [5:0] out;
  wire [5:0] a0, a1, a2, a3;
  wire [1:0] sel;
  wire [5:0] out;
  mux4$ \loop.mux_gen[0].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[0]), .in1 (a1[0]), .in2 (a2[0]), .in3 (a3[0]), .outb
       (out[0]));
  mux4$ \loop.mux_gen[1].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[1]), .in1 (a1[1]), .in2 (a2[1]), .in3 (a3[1]), .outb
       (out[1]));
  mux4$ \loop.mux_gen[2].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[2]), .in1 (a1[2]), .in2 (a2[2]), .in3 (a3[2]), .outb
       (out[2]));
  mux4$ \loop.mux_gen[3].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[3]), .in1 (a1[3]), .in2 (a2[3]), .in3 (a3[3]), .outb
       (out[3]));
  mux4$ \loop.mux_gen[4].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[4]), .in1 (a1[4]), .in2 (a2[4]), .in3 (a3[4]), .outb
       (out[4]));
  mux4$ \loop.mux_gen[5].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[5]), .in1 (a1[5]), .in2 (a2[5]), .in3 (a3[5]), .outb
       (out[5]));
endmodule

module or_flags(in, alu1_op_size, flags);
  input [31:0] in;
  input [1:0] alu1_op_size;
  output [5:0] flags;
  wire [31:0] in;
  wire [1:0] alu1_op_size;
  wire [5:0] flags;
  wire [5:0] flag8;
  wire [5:0] flag16;
  wire [5:0] flag32;
  zero8 u_z8(.in (in[7:0]), .out (flag8[3]));
  zero16 u_z16(.in (in[15:0]), .out (flag16[3]));
  zero32 u_z32(.in (in), .out (flag32[3]));
  parity u_par8(.in (in[7:0]), .out (flag8[1]));
  parity u_par16(.in (in[7:0]), .out (flag16[1]));
  parity u_par32(.in (in[7:0]), .out (flag32[1]));
  mux_nbit_4x1_N6 flag_mux(.a0 ({1'b0, in[7], flag8[3], 1'b0, flag8[1],
       1'b0}), .a1 ({1'b0, in[15], flag16[3], 1'b0, flag16[1], 1'b0}),
       .a2 ({1'b0, in[31], flag32[3], 1'b0, flag32[1], 1'b0}), .a3
       (6'b000000), .sel (alu1_op_size), .out (flags));
endmodule

module and32(out, in0, in1);
  input [31:0] in0, in1;
  output [31:0] out;
  wire [31:0] in0, in1;
  wire [31:0] out;
  and2$ \gen_and[0].and_inst (.in0 (in0[0]), .in1 (in1[0]), .out
       (out[0]));
  and2$ \gen_and[1].and_inst (.in0 (in0[1]), .in1 (in1[1]), .out
       (out[1]));
  and2$ \gen_and[2].and_inst (.in0 (in0[2]), .in1 (in1[2]), .out
       (out[2]));
  and2$ \gen_and[3].and_inst (.in0 (in0[3]), .in1 (in1[3]), .out
       (out[3]));
  and2$ \gen_and[4].and_inst (.in0 (in0[4]), .in1 (in1[4]), .out
       (out[4]));
  and2$ \gen_and[5].and_inst (.in0 (in0[5]), .in1 (in1[5]), .out
       (out[5]));
  and2$ \gen_and[6].and_inst (.in0 (in0[6]), .in1 (in1[6]), .out
       (out[6]));
  and2$ \gen_and[7].and_inst (.in0 (in0[7]), .in1 (in1[7]), .out
       (out[7]));
  and2$ \gen_and[8].and_inst (.in0 (in0[8]), .in1 (in1[8]), .out
       (out[8]));
  and2$ \gen_and[9].and_inst (.in0 (in0[9]), .in1 (in1[9]), .out
       (out[9]));
  and2$ \gen_and[10].and_inst (.in0 (in0[10]), .in1 (in1[10]), .out
       (out[10]));
  and2$ \gen_and[11].and_inst (.in0 (in0[11]), .in1 (in1[11]), .out
       (out[11]));
  and2$ \gen_and[12].and_inst (.in0 (in0[12]), .in1 (in1[12]), .out
       (out[12]));
  and2$ \gen_and[13].and_inst (.in0 (in0[13]), .in1 (in1[13]), .out
       (out[13]));
  and2$ \gen_and[14].and_inst (.in0 (in0[14]), .in1 (in1[14]), .out
       (out[14]));
  and2$ \gen_and[15].and_inst (.in0 (in0[15]), .in1 (in1[15]), .out
       (out[15]));
  and2$ \gen_and[16].and_inst (.in0 (in0[16]), .in1 (in1[16]), .out
       (out[16]));
  and2$ \gen_and[17].and_inst (.in0 (in0[17]), .in1 (in1[17]), .out
       (out[17]));
  and2$ \gen_and[18].and_inst (.in0 (in0[18]), .in1 (in1[18]), .out
       (out[18]));
  and2$ \gen_and[19].and_inst (.in0 (in0[19]), .in1 (in1[19]), .out
       (out[19]));
  and2$ \gen_and[20].and_inst (.in0 (in0[20]), .in1 (in1[20]), .out
       (out[20]));
  and2$ \gen_and[21].and_inst (.in0 (in0[21]), .in1 (in1[21]), .out
       (out[21]));
  and2$ \gen_and[22].and_inst (.in0 (in0[22]), .in1 (in1[22]), .out
       (out[22]));
  and2$ \gen_and[23].and_inst (.in0 (in0[23]), .in1 (in1[23]), .out
       (out[23]));
  and2$ \gen_and[24].and_inst (.in0 (in0[24]), .in1 (in1[24]), .out
       (out[24]));
  and2$ \gen_and[25].and_inst (.in0 (in0[25]), .in1 (in1[25]), .out
       (out[25]));
  and2$ \gen_and[26].and_inst (.in0 (in0[26]), .in1 (in1[26]), .out
       (out[26]));
  and2$ \gen_and[27].and_inst (.in0 (in0[27]), .in1 (in1[27]), .out
       (out[27]));
  and2$ \gen_and[28].and_inst (.in0 (in0[28]), .in1 (in1[28]), .out
       (out[28]));
  and2$ \gen_and[29].and_inst (.in0 (in0[29]), .in1 (in1[29]), .out
       (out[29]));
  and2$ \gen_and[30].and_inst (.in0 (in0[30]), .in1 (in1[30]), .out
       (out[30]));
  and2$ \gen_and[31].and_inst (.in0 (in0[31]), .in1 (in1[31]), .out
       (out[31]));
endmodule

module and_flags(in, alu1_op_size, flags);
  input [31:0] in;
  input [1:0] alu1_op_size;
  output [5:0] flags;
  wire [31:0] in;
  wire [1:0] alu1_op_size;
  wire [5:0] flags;
  wire [5:0] flag8;
  wire [5:0] flag16;
  wire [5:0] flag32;
  zero8 u_z8(.in (in[7:0]), .out (flag8[3]));
  zero16 u_z16(.in (in[15:0]), .out (flag16[3]));
  zero32 u_z32(.in (in), .out (flag32[3]));
  parity u_par8(.in (in[7:0]), .out (flag8[1]));
  parity u_par16(.in (in[7:0]), .out (flag16[1]));
  parity u_par32(.in (in[7:0]), .out (flag32[1]));
  mux_nbit_4x1_N6 flag_mux(.a0 ({1'b0, in[7], flag8[3], 1'b0, flag8[1],
       1'b0}), .a1 ({1'b0, in[15], flag16[3], 1'b0, flag16[1], 1'b0}),
       .a2 ({1'b0, in[31], flag32[3], 1'b0, flag32[1], 1'b0}), .a3
       (6'b000000), .sel (alu1_op_size), .out (flags));
endmodule

module zero5(in, out);
  input [4:0] in;
  output out;
  wire [4:0] in;
  wire out;
  wire n_0, n_1, n_2;
  and3$ g67(.in0 (n_1), .in1 (n_2), .in2 (n_0), .out (out));
  nor2$ g68(.in0 (in[4]), .in1 (in[3]), .out (n_2));
  nor2$ g69(.in0 (in[2]), .in1 (in[1]), .out (n_1));
  inv1$ g70(.in (in[0]), .out (n_0));
endmodule

module bit_shift_left_flgs(amt, sin, in, out, out_cf, sr2_count_0);
  input [4:0] amt;
  input sin;
  input [31:0] in;
  output [31:0] out;
  output [32:0] out_cf;
  output sr2_count_0;
  wire [4:0] amt;
  wire sin;
  wire [31:0] in;
  wire [31:0] out;
  wire [32:0] out_cf;
  wire sr2_count_0;
  wire \inter[1][0] , \inter[1][1] , \inter[1][2] , \inter[1][3] ,
       \inter[1][4] , \inter[1][5] , \inter[1][6] , \inter[1][7] ;
  wire \inter[1][8] , \inter[1][9] , \inter[1][10] , \inter[1][11] ,
       \inter[1][12] , \inter[1][13] , \inter[1][14] , \inter[1][15] ;
  wire \inter[1][16] , \inter[1][17] , \inter[1][18] , \inter[1][19] ,
       \inter[1][20] , \inter[1][21] , \inter[1][22] , \inter[1][23] ;
  wire \inter[1][24] , \inter[1][25] , \inter[1][26] , \inter[1][27] ,
       \inter[1][28] , \inter[1][29] , \inter[1][30] , \inter[1][31] ;
  wire \inter[1][32] , \inter[2][0] , \inter[2][1] , \inter[2][2] ,
       \inter[2][3] , \inter[2][4] , \inter[2][5] , \inter[2][6] ;
  wire \inter[2][7] , \inter[2][8] , \inter[2][9] , \inter[2][10] ,
       \inter[2][11] , \inter[2][12] , \inter[2][13] , \inter[2][14] ;
  wire \inter[2][15] , \inter[2][16] , \inter[2][17] , \inter[2][18] ,
       \inter[2][19] , \inter[2][20] , \inter[2][21] , \inter[2][22] ;
  wire \inter[2][23] , \inter[2][24] , \inter[2][25] , \inter[2][26] ,
       \inter[2][27] , \inter[2][28] , \inter[2][29] , \inter[2][30] ;
  wire \inter[2][31] , \inter[2][32] , \inter[3][0] , \inter[3][1] ,
       \inter[3][2] , \inter[3][3] , \inter[3][4] , \inter[3][5] ;
  wire \inter[3][6] , \inter[3][7] , \inter[3][8] , \inter[3][9] ,
       \inter[3][10] , \inter[3][11] , \inter[3][12] , \inter[3][13] ;
  wire \inter[3][14] , \inter[3][15] , \inter[3][16] , \inter[3][17] ,
       \inter[3][18] , \inter[3][19] , \inter[3][20] , \inter[3][21] ;
  wire \inter[3][22] , \inter[3][23] , \inter[3][24] , \inter[3][25] ,
       \inter[3][26] , \inter[3][27] , \inter[3][28] , \inter[3][29] ;
  wire \inter[3][30] , \inter[3][31] , \inter[3][32] , \inter[4][0] ,
       \inter[4][1] , \inter[4][2] , \inter[4][3] , \inter[4][4] ;
  wire \inter[4][5] , \inter[4][6] , \inter[4][7] , \inter[4][8] ,
       \inter[4][9] , \inter[4][10] , \inter[4][11] , \inter[4][12] ;
  wire \inter[4][13] , \inter[4][14] , \inter[4][15] , \inter[4][16] ,
       \inter[4][17] , \inter[4][18] , \inter[4][19] , \inter[4][20] ;
  wire \inter[4][21] , \inter[4][22] , \inter[4][23] , \inter[4][24] ,
       \inter[4][25] , \inter[4][26] , \inter[4][27] , \inter[4][28] ;
  wire \inter[4][29] , \inter[4][30] , \inter[4][31] , \inter[4][32] ;
  assign out_cf[0] = out[0];
  assign out_cf[1] = out[1];
  assign out_cf[2] = out[2];
  assign out_cf[3] = out[3];
  assign out_cf[4] = out[4];
  assign out_cf[5] = out[5];
  assign out_cf[6] = out[6];
  assign out_cf[7] = out[7];
  assign out_cf[8] = out[8];
  assign out_cf[9] = out[9];
  assign out_cf[10] = out[10];
  assign out_cf[11] = out[11];
  assign out_cf[12] = out[12];
  assign out_cf[13] = out[13];
  assign out_cf[14] = out[14];
  assign out_cf[15] = out[15];
  assign out_cf[16] = out[16];
  assign out_cf[17] = out[17];
  assign out_cf[18] = out[18];
  assign out_cf[19] = out[19];
  assign out_cf[20] = out[20];
  assign out_cf[21] = out[21];
  assign out_cf[22] = out[22];
  assign out_cf[23] = out[23];
  assign out_cf[24] = out[24];
  assign out_cf[25] = out[25];
  assign out_cf[26] = out[26];
  assign out_cf[27] = out[27];
  assign out_cf[28] = out[28];
  assign out_cf[29] = out[29];
  assign out_cf[30] = out[30];
  assign out_cf[31] = out[31];
  zero5 u_zero(.in (amt), .out (sr2_count_0));
  mux2$ \gen_row[1].gen_col[0].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[0]), .in1 (sin), .outb (\inter[1][0] ));
  mux2$ \gen_row[1].gen_col[1].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[1]), .in1 (sin), .outb (\inter[1][1] ));
  mux2$ \gen_row[1].gen_col[2].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[2]), .in1 (sin), .outb (\inter[1][2] ));
  mux2$ \gen_row[1].gen_col[3].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[3]), .in1 (sin), .outb (\inter[1][3] ));
  mux2$ \gen_row[1].gen_col[4].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[4]), .in1 (sin), .outb (\inter[1][4] ));
  mux2$ \gen_row[1].gen_col[5].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[5]), .in1 (sin), .outb (\inter[1][5] ));
  mux2$ \gen_row[1].gen_col[6].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[6]), .in1 (sin), .outb (\inter[1][6] ));
  mux2$ \gen_row[1].gen_col[7].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[7]), .in1 (sin), .outb (\inter[1][7] ));
  mux2$ \gen_row[1].gen_col[8].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[8]), .in1 (sin), .outb (\inter[1][8] ));
  mux2$ \gen_row[1].gen_col[9].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[9]), .in1 (sin), .outb (\inter[1][9] ));
  mux2$ \gen_row[1].gen_col[10].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[10]), .in1 (sin), .outb (\inter[1][10] ));
  mux2$ \gen_row[1].gen_col[11].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[11]), .in1 (sin), .outb (\inter[1][11] ));
  mux2$ \gen_row[1].gen_col[12].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[12]), .in1 (sin), .outb (\inter[1][12] ));
  mux2$ \gen_row[1].gen_col[13].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[13]), .in1 (sin), .outb (\inter[1][13] ));
  mux2$ \gen_row[1].gen_col[14].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[14]), .in1 (sin), .outb (\inter[1][14] ));
  mux2$ \gen_row[1].gen_col[15].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[15]), .in1 (sin), .outb (\inter[1][15] ));
  mux2$ \gen_row[1].gen_col[16].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[16]), .in1 (in[0]), .outb (\inter[1][16] ));
  mux2$ \gen_row[1].gen_col[17].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[17]), .in1 (in[1]), .outb (\inter[1][17] ));
  mux2$ \gen_row[1].gen_col[18].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[18]), .in1 (in[2]), .outb (\inter[1][18] ));
  mux2$ \gen_row[1].gen_col[19].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[19]), .in1 (in[3]), .outb (\inter[1][19] ));
  mux2$ \gen_row[1].gen_col[20].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[20]), .in1 (in[4]), .outb (\inter[1][20] ));
  mux2$ \gen_row[1].gen_col[21].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[21]), .in1 (in[5]), .outb (\inter[1][21] ));
  mux2$ \gen_row[1].gen_col[22].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[22]), .in1 (in[6]), .outb (\inter[1][22] ));
  mux2$ \gen_row[1].gen_col[23].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[23]), .in1 (in[7]), .outb (\inter[1][23] ));
  mux2$ \gen_row[1].gen_col[24].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[24]), .in1 (in[8]), .outb (\inter[1][24] ));
  mux2$ \gen_row[1].gen_col[25].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[25]), .in1 (in[9]), .outb (\inter[1][25] ));
  mux2$ \gen_row[1].gen_col[26].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[26]), .in1 (in[10]), .outb (\inter[1][26] ));
  mux2$ \gen_row[1].gen_col[27].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[27]), .in1 (in[11]), .outb (\inter[1][27] ));
  mux2$ \gen_row[1].gen_col[28].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[28]), .in1 (in[12]), .outb (\inter[1][28] ));
  mux2$ \gen_row[1].gen_col[29].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[29]), .in1 (in[13]), .outb (\inter[1][29] ));
  mux2$ \gen_row[1].gen_col[30].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[30]), .in1 (in[14]), .outb (\inter[1][30] ));
  mux2$ \gen_row[1].gen_col[31].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[31]), .in1 (in[15]), .outb (\inter[1][31] ));
  mux2$ \gen_row[1].gen_col[32].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (1'b0), .in1 (in[16]), .outb (\inter[1][32] ));
  mux2$ \gen_row[2].gen_col[0].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][0] ), .in1 (sin), .outb (\inter[2][0] ));
  mux2$ \gen_row[2].gen_col[1].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][1] ), .in1 (sin), .outb (\inter[2][1] ));
  mux2$ \gen_row[2].gen_col[2].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][2] ), .in1 (sin), .outb (\inter[2][2] ));
  mux2$ \gen_row[2].gen_col[3].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][3] ), .in1 (sin), .outb (\inter[2][3] ));
  mux2$ \gen_row[2].gen_col[4].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][4] ), .in1 (sin), .outb (\inter[2][4] ));
  mux2$ \gen_row[2].gen_col[5].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][5] ), .in1 (sin), .outb (\inter[2][5] ));
  mux2$ \gen_row[2].gen_col[6].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][6] ), .in1 (sin), .outb (\inter[2][6] ));
  mux2$ \gen_row[2].gen_col[7].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][7] ), .in1 (sin), .outb (\inter[2][7] ));
  mux2$ \gen_row[2].gen_col[8].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][8] ), .in1 (\inter[1][0] ), .outb (\inter[2][8] ));
  mux2$ \gen_row[2].gen_col[9].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][9] ), .in1 (\inter[1][1] ), .outb (\inter[2][9] ));
  mux2$ \gen_row[2].gen_col[10].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][10] ), .in1 (\inter[1][2] ), .outb (\inter[2][10] ));
  mux2$ \gen_row[2].gen_col[11].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][11] ), .in1 (\inter[1][3] ), .outb (\inter[2][11] ));
  mux2$ \gen_row[2].gen_col[12].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][12] ), .in1 (\inter[1][4] ), .outb (\inter[2][12] ));
  mux2$ \gen_row[2].gen_col[13].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][13] ), .in1 (\inter[1][5] ), .outb (\inter[2][13] ));
  mux2$ \gen_row[2].gen_col[14].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][14] ), .in1 (\inter[1][6] ), .outb (\inter[2][14] ));
  mux2$ \gen_row[2].gen_col[15].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][15] ), .in1 (\inter[1][7] ), .outb (\inter[2][15] ));
  mux2$ \gen_row[2].gen_col[16].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][16] ), .in1 (\inter[1][8] ), .outb (\inter[2][16] ));
  mux2$ \gen_row[2].gen_col[17].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][17] ), .in1 (\inter[1][9] ), .outb (\inter[2][17] ));
  mux2$ \gen_row[2].gen_col[18].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][18] ), .in1 (\inter[1][10] ), .outb (\inter[2][18] ));
  mux2$ \gen_row[2].gen_col[19].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][19] ), .in1 (\inter[1][11] ), .outb (\inter[2][19] ));
  mux2$ \gen_row[2].gen_col[20].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][20] ), .in1 (\inter[1][12] ), .outb (\inter[2][20] ));
  mux2$ \gen_row[2].gen_col[21].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][21] ), .in1 (\inter[1][13] ), .outb (\inter[2][21] ));
  mux2$ \gen_row[2].gen_col[22].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][22] ), .in1 (\inter[1][14] ), .outb (\inter[2][22] ));
  mux2$ \gen_row[2].gen_col[23].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][23] ), .in1 (\inter[1][15] ), .outb (\inter[2][23] ));
  mux2$ \gen_row[2].gen_col[24].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][24] ), .in1 (\inter[1][16] ), .outb (\inter[2][24] ));
  mux2$ \gen_row[2].gen_col[25].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][25] ), .in1 (\inter[1][17] ), .outb (\inter[2][25] ));
  mux2$ \gen_row[2].gen_col[26].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][26] ), .in1 (\inter[1][18] ), .outb (\inter[2][26] ));
  mux2$ \gen_row[2].gen_col[27].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][27] ), .in1 (\inter[1][19] ), .outb (\inter[2][27] ));
  mux2$ \gen_row[2].gen_col[28].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][28] ), .in1 (\inter[1][20] ), .outb (\inter[2][28] ));
  mux2$ \gen_row[2].gen_col[29].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][29] ), .in1 (\inter[1][21] ), .outb (\inter[2][29] ));
  mux2$ \gen_row[2].gen_col[30].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][30] ), .in1 (\inter[1][22] ), .outb (\inter[2][30] ));
  mux2$ \gen_row[2].gen_col[31].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][31] ), .in1 (\inter[1][23] ), .outb (\inter[2][31] ));
  mux2$ \gen_row[2].gen_col[32].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][32] ), .in1 (\inter[1][24] ), .outb (\inter[2][32] ));
  mux2$ \gen_row[3].gen_col[0].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][0] ), .in1 (sin), .outb (\inter[3][0] ));
  mux2$ \gen_row[3].gen_col[1].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][1] ), .in1 (sin), .outb (\inter[3][1] ));
  mux2$ \gen_row[3].gen_col[2].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][2] ), .in1 (sin), .outb (\inter[3][2] ));
  mux2$ \gen_row[3].gen_col[3].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][3] ), .in1 (sin), .outb (\inter[3][3] ));
  mux2$ \gen_row[3].gen_col[4].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][4] ), .in1 (\inter[2][0] ), .outb (\inter[3][4] ));
  mux2$ \gen_row[3].gen_col[5].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][5] ), .in1 (\inter[2][1] ), .outb (\inter[3][5] ));
  mux2$ \gen_row[3].gen_col[6].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][6] ), .in1 (\inter[2][2] ), .outb (\inter[3][6] ));
  mux2$ \gen_row[3].gen_col[7].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][7] ), .in1 (\inter[2][3] ), .outb (\inter[3][7] ));
  mux2$ \gen_row[3].gen_col[8].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][8] ), .in1 (\inter[2][4] ), .outb (\inter[3][8] ));
  mux2$ \gen_row[3].gen_col[9].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][9] ), .in1 (\inter[2][5] ), .outb (\inter[3][9] ));
  mux2$ \gen_row[3].gen_col[10].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][10] ), .in1 (\inter[2][6] ), .outb (\inter[3][10] ));
  mux2$ \gen_row[3].gen_col[11].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][11] ), .in1 (\inter[2][7] ), .outb (\inter[3][11] ));
  mux2$ \gen_row[3].gen_col[12].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][12] ), .in1 (\inter[2][8] ), .outb (\inter[3][12] ));
  mux2$ \gen_row[3].gen_col[13].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][13] ), .in1 (\inter[2][9] ), .outb (\inter[3][13] ));
  mux2$ \gen_row[3].gen_col[14].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][14] ), .in1 (\inter[2][10] ), .outb (\inter[3][14] ));
  mux2$ \gen_row[3].gen_col[15].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][15] ), .in1 (\inter[2][11] ), .outb (\inter[3][15] ));
  mux2$ \gen_row[3].gen_col[16].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][16] ), .in1 (\inter[2][12] ), .outb (\inter[3][16] ));
  mux2$ \gen_row[3].gen_col[17].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][17] ), .in1 (\inter[2][13] ), .outb (\inter[3][17] ));
  mux2$ \gen_row[3].gen_col[18].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][18] ), .in1 (\inter[2][14] ), .outb (\inter[3][18] ));
  mux2$ \gen_row[3].gen_col[19].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][19] ), .in1 (\inter[2][15] ), .outb (\inter[3][19] ));
  mux2$ \gen_row[3].gen_col[20].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][20] ), .in1 (\inter[2][16] ), .outb (\inter[3][20] ));
  mux2$ \gen_row[3].gen_col[21].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][21] ), .in1 (\inter[2][17] ), .outb (\inter[3][21] ));
  mux2$ \gen_row[3].gen_col[22].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][22] ), .in1 (\inter[2][18] ), .outb (\inter[3][22] ));
  mux2$ \gen_row[3].gen_col[23].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][23] ), .in1 (\inter[2][19] ), .outb (\inter[3][23] ));
  mux2$ \gen_row[3].gen_col[24].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][24] ), .in1 (\inter[2][20] ), .outb (\inter[3][24] ));
  mux2$ \gen_row[3].gen_col[25].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][25] ), .in1 (\inter[2][21] ), .outb (\inter[3][25] ));
  mux2$ \gen_row[3].gen_col[26].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][26] ), .in1 (\inter[2][22] ), .outb (\inter[3][26] ));
  mux2$ \gen_row[3].gen_col[27].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][27] ), .in1 (\inter[2][23] ), .outb (\inter[3][27] ));
  mux2$ \gen_row[3].gen_col[28].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][28] ), .in1 (\inter[2][24] ), .outb (\inter[3][28] ));
  mux2$ \gen_row[3].gen_col[29].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][29] ), .in1 (\inter[2][25] ), .outb (\inter[3][29] ));
  mux2$ \gen_row[3].gen_col[30].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][30] ), .in1 (\inter[2][26] ), .outb (\inter[3][30] ));
  mux2$ \gen_row[3].gen_col[31].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][31] ), .in1 (\inter[2][27] ), .outb (\inter[3][31] ));
  mux2$ \gen_row[3].gen_col[32].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][32] ), .in1 (\inter[2][28] ), .outb (\inter[3][32] ));
  mux2$ \gen_row[4].gen_col[0].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][0] ), .in1 (sin), .outb (\inter[4][0] ));
  mux2$ \gen_row[4].gen_col[1].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][1] ), .in1 (sin), .outb (\inter[4][1] ));
  mux2$ \gen_row[4].gen_col[2].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][2] ), .in1 (\inter[3][0] ), .outb (\inter[4][2] ));
  mux2$ \gen_row[4].gen_col[3].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][3] ), .in1 (\inter[3][1] ), .outb (\inter[4][3] ));
  mux2$ \gen_row[4].gen_col[4].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][4] ), .in1 (\inter[3][2] ), .outb (\inter[4][4] ));
  mux2$ \gen_row[4].gen_col[5].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][5] ), .in1 (\inter[3][3] ), .outb (\inter[4][5] ));
  mux2$ \gen_row[4].gen_col[6].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][6] ), .in1 (\inter[3][4] ), .outb (\inter[4][6] ));
  mux2$ \gen_row[4].gen_col[7].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][7] ), .in1 (\inter[3][5] ), .outb (\inter[4][7] ));
  mux2$ \gen_row[4].gen_col[8].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][8] ), .in1 (\inter[3][6] ), .outb (\inter[4][8] ));
  mux2$ \gen_row[4].gen_col[9].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][9] ), .in1 (\inter[3][7] ), .outb (\inter[4][9] ));
  mux2$ \gen_row[4].gen_col[10].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][10] ), .in1 (\inter[3][8] ), .outb (\inter[4][10] ));
  mux2$ \gen_row[4].gen_col[11].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][11] ), .in1 (\inter[3][9] ), .outb (\inter[4][11] ));
  mux2$ \gen_row[4].gen_col[12].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][12] ), .in1 (\inter[3][10] ), .outb (\inter[4][12] ));
  mux2$ \gen_row[4].gen_col[13].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][13] ), .in1 (\inter[3][11] ), .outb (\inter[4][13] ));
  mux2$ \gen_row[4].gen_col[14].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][14] ), .in1 (\inter[3][12] ), .outb (\inter[4][14] ));
  mux2$ \gen_row[4].gen_col[15].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][15] ), .in1 (\inter[3][13] ), .outb (\inter[4][15] ));
  mux2$ \gen_row[4].gen_col[16].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][16] ), .in1 (\inter[3][14] ), .outb (\inter[4][16] ));
  mux2$ \gen_row[4].gen_col[17].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][17] ), .in1 (\inter[3][15] ), .outb (\inter[4][17] ));
  mux2$ \gen_row[4].gen_col[18].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][18] ), .in1 (\inter[3][16] ), .outb (\inter[4][18] ));
  mux2$ \gen_row[4].gen_col[19].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][19] ), .in1 (\inter[3][17] ), .outb (\inter[4][19] ));
  mux2$ \gen_row[4].gen_col[20].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][20] ), .in1 (\inter[3][18] ), .outb (\inter[4][20] ));
  mux2$ \gen_row[4].gen_col[21].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][21] ), .in1 (\inter[3][19] ), .outb (\inter[4][21] ));
  mux2$ \gen_row[4].gen_col[22].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][22] ), .in1 (\inter[3][20] ), .outb (\inter[4][22] ));
  mux2$ \gen_row[4].gen_col[23].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][23] ), .in1 (\inter[3][21] ), .outb (\inter[4][23] ));
  mux2$ \gen_row[4].gen_col[24].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][24] ), .in1 (\inter[3][22] ), .outb (\inter[4][24] ));
  mux2$ \gen_row[4].gen_col[25].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][25] ), .in1 (\inter[3][23] ), .outb (\inter[4][25] ));
  mux2$ \gen_row[4].gen_col[26].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][26] ), .in1 (\inter[3][24] ), .outb (\inter[4][26] ));
  mux2$ \gen_row[4].gen_col[27].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][27] ), .in1 (\inter[3][25] ), .outb (\inter[4][27] ));
  mux2$ \gen_row[4].gen_col[28].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][28] ), .in1 (\inter[3][26] ), .outb (\inter[4][28] ));
  mux2$ \gen_row[4].gen_col[29].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][29] ), .in1 (\inter[3][27] ), .outb (\inter[4][29] ));
  mux2$ \gen_row[4].gen_col[30].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][30] ), .in1 (\inter[3][28] ), .outb (\inter[4][30] ));
  mux2$ \gen_row[4].gen_col[31].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][31] ), .in1 (\inter[3][29] ), .outb (\inter[4][31] ));
  mux2$ \gen_row[4].gen_col[32].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][32] ), .in1 (\inter[3][30] ), .outb (\inter[4][32] ));
  mux2$ \gen_row[5].gen_col[0].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][0] ), .in1 (sin), .outb (out[0]));
  mux2$ \gen_row[5].gen_col[1].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][1] ), .in1 (\inter[4][0] ), .outb (out[1]));
  mux2$ \gen_row[5].gen_col[2].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][2] ), .in1 (\inter[4][1] ), .outb (out[2]));
  mux2$ \gen_row[5].gen_col[3].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][3] ), .in1 (\inter[4][2] ), .outb (out[3]));
  mux2$ \gen_row[5].gen_col[4].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][4] ), .in1 (\inter[4][3] ), .outb (out[4]));
  mux2$ \gen_row[5].gen_col[5].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][5] ), .in1 (\inter[4][4] ), .outb (out[5]));
  mux2$ \gen_row[5].gen_col[6].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][6] ), .in1 (\inter[4][5] ), .outb (out[6]));
  mux2$ \gen_row[5].gen_col[7].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][7] ), .in1 (\inter[4][6] ), .outb (out[7]));
  mux2$ \gen_row[5].gen_col[8].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][8] ), .in1 (\inter[4][7] ), .outb (out[8]));
  mux2$ \gen_row[5].gen_col[9].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][9] ), .in1 (\inter[4][8] ), .outb (out[9]));
  mux2$ \gen_row[5].gen_col[10].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][10] ), .in1 (\inter[4][9] ), .outb (out[10]));
  mux2$ \gen_row[5].gen_col[11].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][11] ), .in1 (\inter[4][10] ), .outb (out[11]));
  mux2$ \gen_row[5].gen_col[12].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][12] ), .in1 (\inter[4][11] ), .outb (out[12]));
  mux2$ \gen_row[5].gen_col[13].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][13] ), .in1 (\inter[4][12] ), .outb (out[13]));
  mux2$ \gen_row[5].gen_col[14].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][14] ), .in1 (\inter[4][13] ), .outb (out[14]));
  mux2$ \gen_row[5].gen_col[15].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][15] ), .in1 (\inter[4][14] ), .outb (out[15]));
  mux2$ \gen_row[5].gen_col[16].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][16] ), .in1 (\inter[4][15] ), .outb (out[16]));
  mux2$ \gen_row[5].gen_col[17].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][17] ), .in1 (\inter[4][16] ), .outb (out[17]));
  mux2$ \gen_row[5].gen_col[18].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][18] ), .in1 (\inter[4][17] ), .outb (out[18]));
  mux2$ \gen_row[5].gen_col[19].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][19] ), .in1 (\inter[4][18] ), .outb (out[19]));
  mux2$ \gen_row[5].gen_col[20].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][20] ), .in1 (\inter[4][19] ), .outb (out[20]));
  mux2$ \gen_row[5].gen_col[21].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][21] ), .in1 (\inter[4][20] ), .outb (out[21]));
  mux2$ \gen_row[5].gen_col[22].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][22] ), .in1 (\inter[4][21] ), .outb (out[22]));
  mux2$ \gen_row[5].gen_col[23].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][23] ), .in1 (\inter[4][22] ), .outb (out[23]));
  mux2$ \gen_row[5].gen_col[24].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][24] ), .in1 (\inter[4][23] ), .outb (out[24]));
  mux2$ \gen_row[5].gen_col[25].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][25] ), .in1 (\inter[4][24] ), .outb (out[25]));
  mux2$ \gen_row[5].gen_col[26].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][26] ), .in1 (\inter[4][25] ), .outb (out[26]));
  mux2$ \gen_row[5].gen_col[27].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][27] ), .in1 (\inter[4][26] ), .outb (out[27]));
  mux2$ \gen_row[5].gen_col[28].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][28] ), .in1 (\inter[4][27] ), .outb (out[28]));
  mux2$ \gen_row[5].gen_col[29].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][29] ), .in1 (\inter[4][28] ), .outb (out[29]));
  mux2$ \gen_row[5].gen_col[30].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][30] ), .in1 (\inter[4][29] ), .outb (out[30]));
  mux2$ \gen_row[5].gen_col[31].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][31] ), .in1 (\inter[4][30] ), .outb (out[31]));
  mux2$ \gen_row[5].gen_col[32].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][32] ), .in1 (\inter[4][31] ), .outb (out_cf[32]));
endmodule

module sal_flags(in, alu1_op_size, flags);
  input [32:0] in;
  input [1:0] alu1_op_size;
  output [5:0] flags;
  wire [32:0] in;
  wire [1:0] alu1_op_size;
  wire [5:0] flags;
  wire [5:0] flag8;
  wire [5:0] flag16;
  wire [5:0] flag32;
  zero8 u_z8(.in (in[7:0]), .out (flag8[3]));
  zero16 u_z16(.in (in[15:0]), .out (flag16[3]));
  zero32 u_z32(.in (in[31:0]), .out (flag32[3]));
  parity u_par8(.in (in[7:0]), .out (flag8[1]));
  parity u_par16(.in (in[7:0]), .out (flag16[1]));
  parity u_par32(.in (in[7:0]), .out (flag32[1]));
  mux_nbit_4x1_N6 flag_mux(.a0 ({flag8[5], in[7], flag8[3], 1'b0,
       flag8[1], in[8]}), .a1 ({flag16[5], in[15], flag16[3], 1'b0,
       flag16[1], in[16]}), .a2 ({flag32[5], in[31], flag32[3], 1'b0,
       flag32[1], in[32]}), .a3 (6'b000000), .sel (alu1_op_size), .out
       (flags));
  xnor2$ u_xnor0(.in0 (in[8]), .in1 (in[7]), .out (flag8[5]));
  xnor2$ u_xnor1(.in0 (in[16]), .in1 (in[15]), .out (flag16[5]));
  xnor2$ u_xnor2(.in0 (in[32]), .in1 (in[31]), .out (flag32[5]));
endmodule

module bit_shift_right_flgs(amt, sin, in, out, out_cf, sr2_count_0);
  input [4:0] amt;
  input sin;
  input [31:0] in;
  output [31:0] out;
  output [32:0] out_cf;
  output sr2_count_0;
  wire [4:0] amt;
  wire sin;
  wire [31:0] in;
  wire [31:0] out;
  wire [32:0] out_cf;
  wire sr2_count_0;
  wire \inter[1][0] , \inter[1][1] , \inter[1][2] , \inter[1][3] ,
       \inter[1][4] , \inter[1][5] , \inter[1][6] , \inter[1][7] ;
  wire \inter[1][8] , \inter[1][9] , \inter[1][10] , \inter[1][11] ,
       \inter[1][12] , \inter[1][13] , \inter[1][14] , \inter[1][15] ;
  wire \inter[1][16] , \inter[1][17] , \inter[1][18] , \inter[1][19] ,
       \inter[1][20] , \inter[1][21] , \inter[1][22] , \inter[1][23] ;
  wire \inter[1][24] , \inter[1][25] , \inter[1][26] , \inter[1][27] ,
       \inter[1][28] , \inter[1][29] , \inter[1][30] , \inter[1][31] ;
  wire \inter[1][32] , \inter[2][0] , \inter[2][1] , \inter[2][2] ,
       \inter[2][3] , \inter[2][4] , \inter[2][5] , \inter[2][6] ;
  wire \inter[2][7] , \inter[2][8] , \inter[2][9] , \inter[2][10] ,
       \inter[2][11] , \inter[2][12] , \inter[2][13] , \inter[2][14] ;
  wire \inter[2][15] , \inter[2][16] , \inter[2][17] , \inter[2][18] ,
       \inter[2][19] , \inter[2][20] , \inter[2][21] , \inter[2][22] ;
  wire \inter[2][23] , \inter[2][24] , \inter[2][25] , \inter[2][26] ,
       \inter[2][27] , \inter[2][28] , \inter[2][29] , \inter[2][30] ;
  wire \inter[2][31] , \inter[2][32] , \inter[3][0] , \inter[3][1] ,
       \inter[3][2] , \inter[3][3] , \inter[3][4] , \inter[3][5] ;
  wire \inter[3][6] , \inter[3][7] , \inter[3][8] , \inter[3][9] ,
       \inter[3][10] , \inter[3][11] , \inter[3][12] , \inter[3][13] ;
  wire \inter[3][14] , \inter[3][15] , \inter[3][16] , \inter[3][17] ,
       \inter[3][18] , \inter[3][19] , \inter[3][20] , \inter[3][21] ;
  wire \inter[3][22] , \inter[3][23] , \inter[3][24] , \inter[3][25] ,
       \inter[3][26] , \inter[3][27] , \inter[3][28] , \inter[3][29] ;
  wire \inter[3][30] , \inter[3][31] , \inter[3][32] , \inter[4][0] ,
       \inter[4][1] , \inter[4][2] , \inter[4][3] , \inter[4][4] ;
  wire \inter[4][5] , \inter[4][6] , \inter[4][7] , \inter[4][8] ,
       \inter[4][9] , \inter[4][10] , \inter[4][11] , \inter[4][12] ;
  wire \inter[4][13] , \inter[4][14] , \inter[4][15] , \inter[4][16] ,
       \inter[4][17] , \inter[4][18] , \inter[4][19] , \inter[4][20] ;
  wire \inter[4][21] , \inter[4][22] , \inter[4][23] , \inter[4][24] ,
       \inter[4][25] , \inter[4][26] , \inter[4][27] , \inter[4][28] ;
  wire \inter[4][29] , \inter[4][30] , \inter[4][31] , \inter[4][32] ;
  assign out_cf[1] = out[0];
  assign out_cf[2] = out[1];
  assign out_cf[3] = out[2];
  assign out_cf[4] = out[3];
  assign out_cf[5] = out[4];
  assign out_cf[6] = out[5];
  assign out_cf[7] = out[6];
  assign out_cf[8] = out[7];
  assign out_cf[9] = out[8];
  assign out_cf[10] = out[9];
  assign out_cf[11] = out[10];
  assign out_cf[12] = out[11];
  assign out_cf[13] = out[12];
  assign out_cf[14] = out[13];
  assign out_cf[15] = out[14];
  assign out_cf[16] = out[15];
  assign out_cf[17] = out[16];
  assign out_cf[18] = out[17];
  assign out_cf[19] = out[18];
  assign out_cf[20] = out[19];
  assign out_cf[21] = out[20];
  assign out_cf[22] = out[21];
  assign out_cf[23] = out[22];
  assign out_cf[24] = out[23];
  assign out_cf[25] = out[24];
  assign out_cf[26] = out[25];
  assign out_cf[27] = out[26];
  assign out_cf[28] = out[27];
  assign out_cf[29] = out[28];
  assign out_cf[30] = out[29];
  assign out_cf[31] = out[30];
  assign out_cf[32] = out[31];
  zero5 u_zero(.in (amt), .out (sr2_count_0));
  mux2$ \gen_row[1].gen_col[0].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (1'b0), .in1 (in[15]), .outb (\inter[1][0] ));
  mux2$ \gen_row[1].gen_col[1].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[0]), .in1 (in[16]), .outb (\inter[1][1] ));
  mux2$ \gen_row[1].gen_col[2].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[1]), .in1 (in[17]), .outb (\inter[1][2] ));
  mux2$ \gen_row[1].gen_col[3].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[2]), .in1 (in[18]), .outb (\inter[1][3] ));
  mux2$ \gen_row[1].gen_col[4].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[3]), .in1 (in[19]), .outb (\inter[1][4] ));
  mux2$ \gen_row[1].gen_col[5].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[4]), .in1 (in[20]), .outb (\inter[1][5] ));
  mux2$ \gen_row[1].gen_col[6].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[5]), .in1 (in[21]), .outb (\inter[1][6] ));
  mux2$ \gen_row[1].gen_col[7].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[6]), .in1 (in[22]), .outb (\inter[1][7] ));
  mux2$ \gen_row[1].gen_col[8].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[7]), .in1 (in[23]), .outb (\inter[1][8] ));
  mux2$ \gen_row[1].gen_col[9].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[8]), .in1 (in[24]), .outb (\inter[1][9] ));
  mux2$ \gen_row[1].gen_col[10].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[9]), .in1 (in[25]), .outb (\inter[1][10] ));
  mux2$ \gen_row[1].gen_col[11].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[10]), .in1 (in[26]), .outb (\inter[1][11] ));
  mux2$ \gen_row[1].gen_col[12].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[11]), .in1 (in[27]), .outb (\inter[1][12] ));
  mux2$ \gen_row[1].gen_col[13].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[12]), .in1 (in[28]), .outb (\inter[1][13] ));
  mux2$ \gen_row[1].gen_col[14].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[13]), .in1 (in[29]), .outb (\inter[1][14] ));
  mux2$ \gen_row[1].gen_col[15].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[14]), .in1 (in[30]), .outb (\inter[1][15] ));
  mux2$ \gen_row[1].gen_col[16].lower.u_mux_1bit (.s0 (amt[4]), .in0
       (in[15]), .in1 (in[31]), .outb (\inter[1][16] ));
  mux2$ \gen_row[1].gen_col[17].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[16]), .in1 (sin), .outb (\inter[1][17] ));
  mux2$ \gen_row[1].gen_col[18].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[17]), .in1 (sin), .outb (\inter[1][18] ));
  mux2$ \gen_row[1].gen_col[19].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[18]), .in1 (sin), .outb (\inter[1][19] ));
  mux2$ \gen_row[1].gen_col[20].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[19]), .in1 (sin), .outb (\inter[1][20] ));
  mux2$ \gen_row[1].gen_col[21].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[20]), .in1 (sin), .outb (\inter[1][21] ));
  mux2$ \gen_row[1].gen_col[22].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[21]), .in1 (sin), .outb (\inter[1][22] ));
  mux2$ \gen_row[1].gen_col[23].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[22]), .in1 (sin), .outb (\inter[1][23] ));
  mux2$ \gen_row[1].gen_col[24].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[23]), .in1 (sin), .outb (\inter[1][24] ));
  mux2$ \gen_row[1].gen_col[25].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[24]), .in1 (sin), .outb (\inter[1][25] ));
  mux2$ \gen_row[1].gen_col[26].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[25]), .in1 (sin), .outb (\inter[1][26] ));
  mux2$ \gen_row[1].gen_col[27].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[26]), .in1 (sin), .outb (\inter[1][27] ));
  mux2$ \gen_row[1].gen_col[28].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[27]), .in1 (sin), .outb (\inter[1][28] ));
  mux2$ \gen_row[1].gen_col[29].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[28]), .in1 (sin), .outb (\inter[1][29] ));
  mux2$ \gen_row[1].gen_col[30].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[29]), .in1 (sin), .outb (\inter[1][30] ));
  mux2$ \gen_row[1].gen_col[31].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[30]), .in1 (sin), .outb (\inter[1][31] ));
  mux2$ \gen_row[1].gen_col[32].upper.u_mux_1bit (.s0 (amt[4]), .in0
       (in[31]), .in1 (sin), .outb (\inter[1][32] ));
  mux2$ \gen_row[2].gen_col[0].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][0] ), .in1 (\inter[1][8] ), .outb (\inter[2][0] ));
  mux2$ \gen_row[2].gen_col[1].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][1] ), .in1 (\inter[1][9] ), .outb (\inter[2][1] ));
  mux2$ \gen_row[2].gen_col[2].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][2] ), .in1 (\inter[1][10] ), .outb (\inter[2][2] ));
  mux2$ \gen_row[2].gen_col[3].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][3] ), .in1 (\inter[1][11] ), .outb (\inter[2][3] ));
  mux2$ \gen_row[2].gen_col[4].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][4] ), .in1 (\inter[1][12] ), .outb (\inter[2][4] ));
  mux2$ \gen_row[2].gen_col[5].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][5] ), .in1 (\inter[1][13] ), .outb (\inter[2][5] ));
  mux2$ \gen_row[2].gen_col[6].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][6] ), .in1 (\inter[1][14] ), .outb (\inter[2][6] ));
  mux2$ \gen_row[2].gen_col[7].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][7] ), .in1 (\inter[1][15] ), .outb (\inter[2][7] ));
  mux2$ \gen_row[2].gen_col[8].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][8] ), .in1 (\inter[1][16] ), .outb (\inter[2][8] ));
  mux2$ \gen_row[2].gen_col[9].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][9] ), .in1 (\inter[1][17] ), .outb (\inter[2][9] ));
  mux2$ \gen_row[2].gen_col[10].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][10] ), .in1 (\inter[1][18] ), .outb (\inter[2][10] ));
  mux2$ \gen_row[2].gen_col[11].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][11] ), .in1 (\inter[1][19] ), .outb (\inter[2][11] ));
  mux2$ \gen_row[2].gen_col[12].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][12] ), .in1 (\inter[1][20] ), .outb (\inter[2][12] ));
  mux2$ \gen_row[2].gen_col[13].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][13] ), .in1 (\inter[1][21] ), .outb (\inter[2][13] ));
  mux2$ \gen_row[2].gen_col[14].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][14] ), .in1 (\inter[1][22] ), .outb (\inter[2][14] ));
  mux2$ \gen_row[2].gen_col[15].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][15] ), .in1 (\inter[1][23] ), .outb (\inter[2][15] ));
  mux2$ \gen_row[2].gen_col[16].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][16] ), .in1 (\inter[1][24] ), .outb (\inter[2][16] ));
  mux2$ \gen_row[2].gen_col[17].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][17] ), .in1 (\inter[1][25] ), .outb (\inter[2][17] ));
  mux2$ \gen_row[2].gen_col[18].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][18] ), .in1 (\inter[1][26] ), .outb (\inter[2][18] ));
  mux2$ \gen_row[2].gen_col[19].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][19] ), .in1 (\inter[1][27] ), .outb (\inter[2][19] ));
  mux2$ \gen_row[2].gen_col[20].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][20] ), .in1 (\inter[1][28] ), .outb (\inter[2][20] ));
  mux2$ \gen_row[2].gen_col[21].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][21] ), .in1 (\inter[1][29] ), .outb (\inter[2][21] ));
  mux2$ \gen_row[2].gen_col[22].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][22] ), .in1 (\inter[1][30] ), .outb (\inter[2][22] ));
  mux2$ \gen_row[2].gen_col[23].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][23] ), .in1 (\inter[1][31] ), .outb (\inter[2][23] ));
  mux2$ \gen_row[2].gen_col[24].lower.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][24] ), .in1 (\inter[1][32] ), .outb (\inter[2][24] ));
  mux2$ \gen_row[2].gen_col[25].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][25] ), .in1 (sin), .outb (\inter[2][25] ));
  mux2$ \gen_row[2].gen_col[26].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][26] ), .in1 (sin), .outb (\inter[2][26] ));
  mux2$ \gen_row[2].gen_col[27].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][27] ), .in1 (sin), .outb (\inter[2][27] ));
  mux2$ \gen_row[2].gen_col[28].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][28] ), .in1 (sin), .outb (\inter[2][28] ));
  mux2$ \gen_row[2].gen_col[29].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][29] ), .in1 (sin), .outb (\inter[2][29] ));
  mux2$ \gen_row[2].gen_col[30].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][30] ), .in1 (sin), .outb (\inter[2][30] ));
  mux2$ \gen_row[2].gen_col[31].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][31] ), .in1 (sin), .outb (\inter[2][31] ));
  mux2$ \gen_row[2].gen_col[32].upper.u_mux_1bit (.s0 (amt[3]), .in0
       (\inter[1][32] ), .in1 (sin), .outb (\inter[2][32] ));
  mux2$ \gen_row[3].gen_col[0].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][0] ), .in1 (\inter[2][4] ), .outb (\inter[3][0] ));
  mux2$ \gen_row[3].gen_col[1].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][1] ), .in1 (\inter[2][5] ), .outb (\inter[3][1] ));
  mux2$ \gen_row[3].gen_col[2].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][2] ), .in1 (\inter[2][6] ), .outb (\inter[3][2] ));
  mux2$ \gen_row[3].gen_col[3].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][3] ), .in1 (\inter[2][7] ), .outb (\inter[3][3] ));
  mux2$ \gen_row[3].gen_col[4].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][4] ), .in1 (\inter[2][8] ), .outb (\inter[3][4] ));
  mux2$ \gen_row[3].gen_col[5].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][5] ), .in1 (\inter[2][9] ), .outb (\inter[3][5] ));
  mux2$ \gen_row[3].gen_col[6].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][6] ), .in1 (\inter[2][10] ), .outb (\inter[3][6] ));
  mux2$ \gen_row[3].gen_col[7].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][7] ), .in1 (\inter[2][11] ), .outb (\inter[3][7] ));
  mux2$ \gen_row[3].gen_col[8].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][8] ), .in1 (\inter[2][12] ), .outb (\inter[3][8] ));
  mux2$ \gen_row[3].gen_col[9].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][9] ), .in1 (\inter[2][13] ), .outb (\inter[3][9] ));
  mux2$ \gen_row[3].gen_col[10].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][10] ), .in1 (\inter[2][14] ), .outb (\inter[3][10] ));
  mux2$ \gen_row[3].gen_col[11].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][11] ), .in1 (\inter[2][15] ), .outb (\inter[3][11] ));
  mux2$ \gen_row[3].gen_col[12].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][12] ), .in1 (\inter[2][16] ), .outb (\inter[3][12] ));
  mux2$ \gen_row[3].gen_col[13].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][13] ), .in1 (\inter[2][17] ), .outb (\inter[3][13] ));
  mux2$ \gen_row[3].gen_col[14].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][14] ), .in1 (\inter[2][18] ), .outb (\inter[3][14] ));
  mux2$ \gen_row[3].gen_col[15].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][15] ), .in1 (\inter[2][19] ), .outb (\inter[3][15] ));
  mux2$ \gen_row[3].gen_col[16].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][16] ), .in1 (\inter[2][20] ), .outb (\inter[3][16] ));
  mux2$ \gen_row[3].gen_col[17].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][17] ), .in1 (\inter[2][21] ), .outb (\inter[3][17] ));
  mux2$ \gen_row[3].gen_col[18].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][18] ), .in1 (\inter[2][22] ), .outb (\inter[3][18] ));
  mux2$ \gen_row[3].gen_col[19].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][19] ), .in1 (\inter[2][23] ), .outb (\inter[3][19] ));
  mux2$ \gen_row[3].gen_col[20].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][20] ), .in1 (\inter[2][24] ), .outb (\inter[3][20] ));
  mux2$ \gen_row[3].gen_col[21].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][21] ), .in1 (\inter[2][25] ), .outb (\inter[3][21] ));
  mux2$ \gen_row[3].gen_col[22].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][22] ), .in1 (\inter[2][26] ), .outb (\inter[3][22] ));
  mux2$ \gen_row[3].gen_col[23].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][23] ), .in1 (\inter[2][27] ), .outb (\inter[3][23] ));
  mux2$ \gen_row[3].gen_col[24].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][24] ), .in1 (\inter[2][28] ), .outb (\inter[3][24] ));
  mux2$ \gen_row[3].gen_col[25].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][25] ), .in1 (\inter[2][29] ), .outb (\inter[3][25] ));
  mux2$ \gen_row[3].gen_col[26].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][26] ), .in1 (\inter[2][30] ), .outb (\inter[3][26] ));
  mux2$ \gen_row[3].gen_col[27].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][27] ), .in1 (\inter[2][31] ), .outb (\inter[3][27] ));
  mux2$ \gen_row[3].gen_col[28].lower.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][28] ), .in1 (\inter[2][32] ), .outb (\inter[3][28] ));
  mux2$ \gen_row[3].gen_col[29].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][29] ), .in1 (sin), .outb (\inter[3][29] ));
  mux2$ \gen_row[3].gen_col[30].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][30] ), .in1 (sin), .outb (\inter[3][30] ));
  mux2$ \gen_row[3].gen_col[31].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][31] ), .in1 (sin), .outb (\inter[3][31] ));
  mux2$ \gen_row[3].gen_col[32].upper.u_mux_1bit (.s0 (amt[2]), .in0
       (\inter[2][32] ), .in1 (sin), .outb (\inter[3][32] ));
  mux2$ \gen_row[4].gen_col[0].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][0] ), .in1 (\inter[3][2] ), .outb (\inter[4][0] ));
  mux2$ \gen_row[4].gen_col[1].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][1] ), .in1 (\inter[3][3] ), .outb (\inter[4][1] ));
  mux2$ \gen_row[4].gen_col[2].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][2] ), .in1 (\inter[3][4] ), .outb (\inter[4][2] ));
  mux2$ \gen_row[4].gen_col[3].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][3] ), .in1 (\inter[3][5] ), .outb (\inter[4][3] ));
  mux2$ \gen_row[4].gen_col[4].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][4] ), .in1 (\inter[3][6] ), .outb (\inter[4][4] ));
  mux2$ \gen_row[4].gen_col[5].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][5] ), .in1 (\inter[3][7] ), .outb (\inter[4][5] ));
  mux2$ \gen_row[4].gen_col[6].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][6] ), .in1 (\inter[3][8] ), .outb (\inter[4][6] ));
  mux2$ \gen_row[4].gen_col[7].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][7] ), .in1 (\inter[3][9] ), .outb (\inter[4][7] ));
  mux2$ \gen_row[4].gen_col[8].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][8] ), .in1 (\inter[3][10] ), .outb (\inter[4][8] ));
  mux2$ \gen_row[4].gen_col[9].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][9] ), .in1 (\inter[3][11] ), .outb (\inter[4][9] ));
  mux2$ \gen_row[4].gen_col[10].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][10] ), .in1 (\inter[3][12] ), .outb (\inter[4][10] ));
  mux2$ \gen_row[4].gen_col[11].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][11] ), .in1 (\inter[3][13] ), .outb (\inter[4][11] ));
  mux2$ \gen_row[4].gen_col[12].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][12] ), .in1 (\inter[3][14] ), .outb (\inter[4][12] ));
  mux2$ \gen_row[4].gen_col[13].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][13] ), .in1 (\inter[3][15] ), .outb (\inter[4][13] ));
  mux2$ \gen_row[4].gen_col[14].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][14] ), .in1 (\inter[3][16] ), .outb (\inter[4][14] ));
  mux2$ \gen_row[4].gen_col[15].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][15] ), .in1 (\inter[3][17] ), .outb (\inter[4][15] ));
  mux2$ \gen_row[4].gen_col[16].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][16] ), .in1 (\inter[3][18] ), .outb (\inter[4][16] ));
  mux2$ \gen_row[4].gen_col[17].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][17] ), .in1 (\inter[3][19] ), .outb (\inter[4][17] ));
  mux2$ \gen_row[4].gen_col[18].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][18] ), .in1 (\inter[3][20] ), .outb (\inter[4][18] ));
  mux2$ \gen_row[4].gen_col[19].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][19] ), .in1 (\inter[3][21] ), .outb (\inter[4][19] ));
  mux2$ \gen_row[4].gen_col[20].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][20] ), .in1 (\inter[3][22] ), .outb (\inter[4][20] ));
  mux2$ \gen_row[4].gen_col[21].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][21] ), .in1 (\inter[3][23] ), .outb (\inter[4][21] ));
  mux2$ \gen_row[4].gen_col[22].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][22] ), .in1 (\inter[3][24] ), .outb (\inter[4][22] ));
  mux2$ \gen_row[4].gen_col[23].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][23] ), .in1 (\inter[3][25] ), .outb (\inter[4][23] ));
  mux2$ \gen_row[4].gen_col[24].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][24] ), .in1 (\inter[3][26] ), .outb (\inter[4][24] ));
  mux2$ \gen_row[4].gen_col[25].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][25] ), .in1 (\inter[3][27] ), .outb (\inter[4][25] ));
  mux2$ \gen_row[4].gen_col[26].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][26] ), .in1 (\inter[3][28] ), .outb (\inter[4][26] ));
  mux2$ \gen_row[4].gen_col[27].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][27] ), .in1 (\inter[3][29] ), .outb (\inter[4][27] ));
  mux2$ \gen_row[4].gen_col[28].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][28] ), .in1 (\inter[3][30] ), .outb (\inter[4][28] ));
  mux2$ \gen_row[4].gen_col[29].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][29] ), .in1 (\inter[3][31] ), .outb (\inter[4][29] ));
  mux2$ \gen_row[4].gen_col[30].lower.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][30] ), .in1 (\inter[3][32] ), .outb (\inter[4][30] ));
  mux2$ \gen_row[4].gen_col[31].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][31] ), .in1 (sin), .outb (\inter[4][31] ));
  mux2$ \gen_row[4].gen_col[32].upper.u_mux_1bit (.s0 (amt[1]), .in0
       (\inter[3][32] ), .in1 (sin), .outb (\inter[4][32] ));
  mux2$ \gen_row[5].gen_col[0].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][0] ), .in1 (\inter[4][1] ), .outb (out_cf[0]));
  mux2$ \gen_row[5].gen_col[1].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][1] ), .in1 (\inter[4][2] ), .outb (out[0]));
  mux2$ \gen_row[5].gen_col[2].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][2] ), .in1 (\inter[4][3] ), .outb (out[1]));
  mux2$ \gen_row[5].gen_col[3].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][3] ), .in1 (\inter[4][4] ), .outb (out[2]));
  mux2$ \gen_row[5].gen_col[4].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][4] ), .in1 (\inter[4][5] ), .outb (out[3]));
  mux2$ \gen_row[5].gen_col[5].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][5] ), .in1 (\inter[4][6] ), .outb (out[4]));
  mux2$ \gen_row[5].gen_col[6].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][6] ), .in1 (\inter[4][7] ), .outb (out[5]));
  mux2$ \gen_row[5].gen_col[7].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][7] ), .in1 (\inter[4][8] ), .outb (out[6]));
  mux2$ \gen_row[5].gen_col[8].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][8] ), .in1 (\inter[4][9] ), .outb (out[7]));
  mux2$ \gen_row[5].gen_col[9].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][9] ), .in1 (\inter[4][10] ), .outb (out[8]));
  mux2$ \gen_row[5].gen_col[10].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][10] ), .in1 (\inter[4][11] ), .outb (out[9]));
  mux2$ \gen_row[5].gen_col[11].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][11] ), .in1 (\inter[4][12] ), .outb (out[10]));
  mux2$ \gen_row[5].gen_col[12].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][12] ), .in1 (\inter[4][13] ), .outb (out[11]));
  mux2$ \gen_row[5].gen_col[13].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][13] ), .in1 (\inter[4][14] ), .outb (out[12]));
  mux2$ \gen_row[5].gen_col[14].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][14] ), .in1 (\inter[4][15] ), .outb (out[13]));
  mux2$ \gen_row[5].gen_col[15].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][15] ), .in1 (\inter[4][16] ), .outb (out[14]));
  mux2$ \gen_row[5].gen_col[16].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][16] ), .in1 (\inter[4][17] ), .outb (out[15]));
  mux2$ \gen_row[5].gen_col[17].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][17] ), .in1 (\inter[4][18] ), .outb (out[16]));
  mux2$ \gen_row[5].gen_col[18].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][18] ), .in1 (\inter[4][19] ), .outb (out[17]));
  mux2$ \gen_row[5].gen_col[19].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][19] ), .in1 (\inter[4][20] ), .outb (out[18]));
  mux2$ \gen_row[5].gen_col[20].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][20] ), .in1 (\inter[4][21] ), .outb (out[19]));
  mux2$ \gen_row[5].gen_col[21].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][21] ), .in1 (\inter[4][22] ), .outb (out[20]));
  mux2$ \gen_row[5].gen_col[22].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][22] ), .in1 (\inter[4][23] ), .outb (out[21]));
  mux2$ \gen_row[5].gen_col[23].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][23] ), .in1 (\inter[4][24] ), .outb (out[22]));
  mux2$ \gen_row[5].gen_col[24].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][24] ), .in1 (\inter[4][25] ), .outb (out[23]));
  mux2$ \gen_row[5].gen_col[25].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][25] ), .in1 (\inter[4][26] ), .outb (out[24]));
  mux2$ \gen_row[5].gen_col[26].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][26] ), .in1 (\inter[4][27] ), .outb (out[25]));
  mux2$ \gen_row[5].gen_col[27].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][27] ), .in1 (\inter[4][28] ), .outb (out[26]));
  mux2$ \gen_row[5].gen_col[28].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][28] ), .in1 (\inter[4][29] ), .outb (out[27]));
  mux2$ \gen_row[5].gen_col[29].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][29] ), .in1 (\inter[4][30] ), .outb (out[28]));
  mux2$ \gen_row[5].gen_col[30].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][30] ), .in1 (\inter[4][31] ), .outb (out[29]));
  mux2$ \gen_row[5].gen_col[31].lower.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][31] ), .in1 (\inter[4][32] ), .outb (out[30]));
  mux2$ \gen_row[5].gen_col[32].upper.u_mux_1bit (.s0 (amt[0]), .in0
       (\inter[4][32] ), .in1 (sin), .outb (out[31]));
endmodule

module mux_nbit_4x1_N32(a0, a1, a2, a3, sel, out);
  input [31:0] a0, a1, a2, a3;
  input [1:0] sel;
  output [31:0] out;
  wire [31:0] a0, a1, a2, a3;
  wire [1:0] sel;
  wire [31:0] out;
  mux4$ \loop.mux_gen[0].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[0]), .in1 (a1[0]), .in2 (a2[0]), .in3 (a3[0]), .outb
       (out[0]));
  mux4$ \loop.mux_gen[1].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[1]), .in1 (a1[1]), .in2 (a2[1]), .in3 (a3[1]), .outb
       (out[1]));
  mux4$ \loop.mux_gen[2].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[2]), .in1 (a1[2]), .in2 (a2[2]), .in3 (a3[2]), .outb
       (out[2]));
  mux4$ \loop.mux_gen[3].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[3]), .in1 (a1[3]), .in2 (a2[3]), .in3 (a3[3]), .outb
       (out[3]));
  mux4$ \loop.mux_gen[4].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[4]), .in1 (a1[4]), .in2 (a2[4]), .in3 (a3[4]), .outb
       (out[4]));
  mux4$ \loop.mux_gen[5].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[5]), .in1 (a1[5]), .in2 (a2[5]), .in3 (a3[5]), .outb
       (out[5]));
  mux4$ \loop.mux_gen[6].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[6]), .in1 (a1[6]), .in2 (a2[6]), .in3 (a3[6]), .outb
       (out[6]));
  mux4$ \loop.mux_gen[7].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[7]), .in1 (a1[7]), .in2 (a2[7]), .in3 (a3[7]), .outb
       (out[7]));
  mux4$ \loop.mux_gen[8].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[8]), .in1 (a1[8]), .in2 (a2[8]), .in3 (a3[8]), .outb
       (out[8]));
  mux4$ \loop.mux_gen[9].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[9]), .in1 (a1[9]), .in2 (a2[9]), .in3 (a3[9]), .outb
       (out[9]));
  mux4$ \loop.mux_gen[10].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[10]), .in1 (a1[10]), .in2 (a2[10]), .in3 (a3[10]), .outb
       (out[10]));
  mux4$ \loop.mux_gen[11].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[11]), .in1 (a1[11]), .in2 (a2[11]), .in3 (a3[11]), .outb
       (out[11]));
  mux4$ \loop.mux_gen[12].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[12]), .in1 (a1[12]), .in2 (a2[12]), .in3 (a3[12]), .outb
       (out[12]));
  mux4$ \loop.mux_gen[13].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[13]), .in1 (a1[13]), .in2 (a2[13]), .in3 (a3[13]), .outb
       (out[13]));
  mux4$ \loop.mux_gen[14].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[14]), .in1 (a1[14]), .in2 (a2[14]), .in3 (a3[14]), .outb
       (out[14]));
  mux4$ \loop.mux_gen[15].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[15]), .in1 (a1[15]), .in2 (a2[15]), .in3 (a3[15]), .outb
       (out[15]));
  mux4$ \loop.mux_gen[16].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[16]), .in1 (a1[16]), .in2 (a2[16]), .in3 (a3[16]), .outb
       (out[16]));
  mux4$ \loop.mux_gen[17].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[17]), .in1 (a1[17]), .in2 (a2[17]), .in3 (a3[17]), .outb
       (out[17]));
  mux4$ \loop.mux_gen[18].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[18]), .in1 (a1[18]), .in2 (a2[18]), .in3 (a3[18]), .outb
       (out[18]));
  mux4$ \loop.mux_gen[19].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[19]), .in1 (a1[19]), .in2 (a2[19]), .in3 (a3[19]), .outb
       (out[19]));
  mux4$ \loop.mux_gen[20].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[20]), .in1 (a1[20]), .in2 (a2[20]), .in3 (a3[20]), .outb
       (out[20]));
  mux4$ \loop.mux_gen[21].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[21]), .in1 (a1[21]), .in2 (a2[21]), .in3 (a3[21]), .outb
       (out[21]));
  mux4$ \loop.mux_gen[22].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[22]), .in1 (a1[22]), .in2 (a2[22]), .in3 (a3[22]), .outb
       (out[22]));
  mux4$ \loop.mux_gen[23].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[23]), .in1 (a1[23]), .in2 (a2[23]), .in3 (a3[23]), .outb
       (out[23]));
  mux4$ \loop.mux_gen[24].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[24]), .in1 (a1[24]), .in2 (a2[24]), .in3 (a3[24]), .outb
       (out[24]));
  mux4$ \loop.mux_gen[25].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[25]), .in1 (a1[25]), .in2 (a2[25]), .in3 (a3[25]), .outb
       (out[25]));
  mux4$ \loop.mux_gen[26].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[26]), .in1 (a1[26]), .in2 (a2[26]), .in3 (a3[26]), .outb
       (out[26]));
  mux4$ \loop.mux_gen[27].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[27]), .in1 (a1[27]), .in2 (a2[27]), .in3 (a3[27]), .outb
       (out[27]));
  mux4$ \loop.mux_gen[28].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[28]), .in1 (a1[28]), .in2 (a2[28]), .in3 (a3[28]), .outb
       (out[28]));
  mux4$ \loop.mux_gen[29].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[29]), .in1 (a1[29]), .in2 (a2[29]), .in3 (a3[29]), .outb
       (out[29]));
  mux4$ \loop.mux_gen[30].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[30]), .in1 (a1[30]), .in2 (a2[30]), .in3 (a3[30]), .outb
       (out[30]));
  mux4$ \loop.mux_gen[31].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[31]), .in1 (a1[31]), .in2 (a2[31]), .in3 (a3[31]), .outb
       (out[31]));
endmodule

module sar_flags(in, alu1_op_size, flags);
  input [32:0] in;
  input [1:0] alu1_op_size;
  output [5:0] flags;
  wire [32:0] in;
  wire [1:0] alu1_op_size;
  wire [5:0] flags;
  wire [5:0] flag8;
  wire [5:0] flag16;
  wire [5:0] flag32;
  zero8 u_z8(.in (in[8:1]), .out (flag8[3]));
  zero16 u_z16(.in (in[16:1]), .out (flag16[3]));
  zero32 u_z32(.in (in[32:1]), .out (flag32[3]));
  parity u_par8(.in (in[8:1]), .out (flag8[1]));
  parity u_par16(.in (in[8:1]), .out (flag16[1]));
  parity u_par32(.in (in[8:1]), .out (flag32[1]));
  mux_nbit_4x1_N6 flag_mux(.a0 ({1'b0, in[8], flag8[3], 1'b0, flag8[1],
       in[0]}), .a1 ({1'b0, in[16], flag16[3], 1'b0, flag16[1],
       in[0]}), .a2 ({1'b0, in[32], flag32[3], 1'b0, flag32[1],
       in[0]}), .a3 (6'b000000), .sel (alu1_op_size), .out (flags));
endmodule

module not32(out, in);
  input [31:0] in;
  output [31:0] out;
  wire [31:0] in;
  wire [31:0] out;
  inv1$ \gen_and[0].and_inst (.in (in[0]), .out (out[0]));
  inv1$ \gen_and[1].and_inst (.in (in[1]), .out (out[1]));
  inv1$ \gen_and[2].and_inst (.in (in[2]), .out (out[2]));
  inv1$ \gen_and[3].and_inst (.in (in[3]), .out (out[3]));
  inv1$ \gen_and[4].and_inst (.in (in[4]), .out (out[4]));
  inv1$ \gen_and[5].and_inst (.in (in[5]), .out (out[5]));
  inv1$ \gen_and[6].and_inst (.in (in[6]), .out (out[6]));
  inv1$ \gen_and[7].and_inst (.in (in[7]), .out (out[7]));
  inv1$ \gen_and[8].and_inst (.in (in[8]), .out (out[8]));
  inv1$ \gen_and[9].and_inst (.in (in[9]), .out (out[9]));
  inv1$ \gen_and[10].and_inst (.in (in[10]), .out (out[10]));
  inv1$ \gen_and[11].and_inst (.in (in[11]), .out (out[11]));
  inv1$ \gen_and[12].and_inst (.in (in[12]), .out (out[12]));
  inv1$ \gen_and[13].and_inst (.in (in[13]), .out (out[13]));
  inv1$ \gen_and[14].and_inst (.in (in[14]), .out (out[14]));
  inv1$ \gen_and[15].and_inst (.in (in[15]), .out (out[15]));
  inv1$ \gen_and[16].and_inst (.in (in[16]), .out (out[16]));
  inv1$ \gen_and[17].and_inst (.in (in[17]), .out (out[17]));
  inv1$ \gen_and[18].and_inst (.in (in[18]), .out (out[18]));
  inv1$ \gen_and[19].and_inst (.in (in[19]), .out (out[19]));
  inv1$ \gen_and[20].and_inst (.in (in[20]), .out (out[20]));
  inv1$ \gen_and[21].and_inst (.in (in[21]), .out (out[21]));
  inv1$ \gen_and[22].and_inst (.in (in[22]), .out (out[22]));
  inv1$ \gen_and[23].and_inst (.in (in[23]), .out (out[23]));
  inv1$ \gen_and[24].and_inst (.in (in[24]), .out (out[24]));
  inv1$ \gen_and[25].and_inst (.in (in[25]), .out (out[25]));
  inv1$ \gen_and[26].and_inst (.in (in[26]), .out (out[26]));
  inv1$ \gen_and[27].and_inst (.in (in[27]), .out (out[27]));
  inv1$ \gen_and[28].and_inst (.in (in[28]), .out (out[28]));
  inv1$ \gen_and[29].and_inst (.in (in[29]), .out (out[29]));
  inv1$ \gen_and[30].and_inst (.in (in[30]), .out (out[30]));
  inv1$ \gen_and[31].and_inst (.in (in[31]), .out (out[31]));
endmodule

module fa(a, b, cin, sum, cout);
  input a, b, cin;
  output sum, cout;
  wire a, b, cin;
  wire sum, cout;
  wire w1, w2, w3, w4;
  xor2$ u_xor1(.in0 (a), .in1 (b), .out (w1));
  xor2$ u_xor2(.in0 (w1), .in1 (cin), .out (sum));
  nand2$ u_nand1(.in0 (a), .in1 (b), .out (w2));
  nand2$ u_nand2(.in0 (b), .in1 (cin), .out (w3));
  nand2$ u_nand3(.in0 (cin), .in1 (a), .out (w4));
  nand3$ u_nand4(.in0 (w2), .in1 (w3), .in2 (w4), .out (cout));
endmodule

module mha(a, b, c0, c1, s0, s1);
  input a, b;
  output c0, c1, s0, s1;
  wire a, b;
  wire c0, c1, s0, s1;
  wire temp1;
  or2$ u_or1(.in0 (a), .in1 (b), .out (c1));
  nand2$ u_nand1(.in0 (a), .in1 (b), .out (temp1));
  inv1$ u_inv1(.in (temp1), .out (c0));
  nand2$ u_nand2(.in0 (c1), .in1 (temp1), .out (s1));
  inv1$ u_inv2(.in (s1), .out (s0));
endmodule

module nibble_low(a, b, cin, s, cout);
  input [3:0] a, b;
  input cin;
  output [3:0] s;
  output cout;
  wire [3:0] a, b;
  wire cin;
  wire [3:0] s;
  wire cout;
  wire c1, c2, c4c30, c4c31, c20, c21, c30, c31;
  wire c40, c41, s3c30, s3c31, s10, s11, s20, s21;
  wire s30, s31;
  fa u_fa(.a (a[0]), .b (b[0]), .cin (cin), .sum (s[0]), .cout (c1));
  mha u_mha1(.a (a[1]), .b (b[1]), .c0 (c20), .c1 (c21), .s0 (s10), .s1
       (s11));
  mha u_mha2(.a (a[2]), .b (b[2]), .c0 (c30), .c1 (c31), .s0 (s20), .s1
       (s21));
  mha u_mha3(.a (a[3]), .b (b[3]), .c0 (c40), .c1 (c41), .s0 (s30), .s1
       (s31));
  mux2$ u_mux1(.s0 (c1), .in0 (s10), .in1 (s11), .outb (s[1]));
  mux2$ u_mux2(.s0 (c1), .in0 (c20), .in1 (c21), .outb (c2));
  mux2$ u_mux3(.s0 (c2), .in0 (s20), .in1 (s21), .outb (s[2]));
  mux2$ u_mux4(.s0 (c30), .in0 (s30), .in1 (s31), .outb (s3c30));
  mux2$ u_mux5(.s0 (c31), .in0 (s30), .in1 (s31), .outb (s3c31));
  mux2$ u_mux6(.s0 (c2), .in0 (s3c30), .in1 (s3c31), .outb (s[3]));
  mux2$ u_mux7(.s0 (c30), .in0 (c40), .in1 (c41), .outb (c4c30));
  mux2$ u_mux8(.s0 (c31), .in0 (c40), .in1 (c41), .outb (c4c31));
  mux2$ u_mux9(.s0 (c2), .in0 (c4c30), .in1 (c4c31), .outb (cout));
endmodule

module nibble_high(a, b, cin, s, cout);
  input [7:4] a, b;
  input cin;
  output [7:4] s;
  output cout;
  wire [7:4] a, b;
  wire cin;
  wire [7:4] s;
  wire cout;
  wire c6c50, c6c51, c8c7c6c50, c8c7c6c51, c8c70, c8c71, c50, c51;
  wire c60, c61, c70, c71, c80, c81, s5c50, s5c51;
  wire s6c6c50, s6c6c51, s7c7c6c50, s7c7c6c51, s7c70, s7c71, s40, s41;
  wire s50, s51, s60, s61, s70, s71;
  mha u_mha1(.a (a[4]), .b (b[4]), .c0 (c50), .c1 (c51), .s0 (s40), .s1
       (s41));
  mha u_mha2(.a (a[5]), .b (b[5]), .c0 (c60), .c1 (c61), .s0 (s50), .s1
       (s51));
  mha u_mha3(.a (a[6]), .b (b[6]), .c0 (c70), .c1 (c71), .s0 (s60), .s1
       (s61));
  mha u_mha4(.a (a[7]), .b (b[7]), .c0 (c80), .c1 (c81), .s0 (s70), .s1
       (s71));
  mux2$ u_mux1(.s0 (cin), .in0 (s40), .in1 (s41), .outb (s[4]));
  mux2$ u_mux2(.s0 (c50), .in0 (s50), .in1 (s51), .outb (s5c50));
  mux2$ u_mux3(.s0 (c51), .in0 (s50), .in1 (s51), .outb (s5c51));
  mux2$ u_mux4(.s0 (cin), .in0 (s5c50), .in1 (s5c51), .outb (s[5]));
  mux2$ u_mux5(.s0 (c50), .in0 (c60), .in1 (c61), .outb (c6c50));
  mux2$ u_mux6(.s0 (c51), .in0 (c60), .in1 (c61), .outb (c6c51));
  mux2$ u_mux7(.s0 (c6c50), .in0 (s60), .in1 (s61), .outb (s6c6c50));
  mux2$ u_mux8(.s0 (c6c51), .in0 (s60), .in1 (s61), .outb (s6c6c51));
  mux2$ u_mux9(.s0 (cin), .in0 (s6c6c50), .in1 (s6c6c51), .outb (s[6]));
  mux2$ u_mux10(.s0 (c70), .in0 (s70), .in1 (s71), .outb (s7c70));
  mux2$ u_mux11(.s0 (c71), .in0 (s70), .in1 (s71), .outb (s7c71));
  mux2$ u_mux12(.s0 (c6c50), .in0 (s7c70), .in1 (s7c71), .outb
       (s7c7c6c50));
  mux2$ u_mux13(.s0 (c6c51), .in0 (s7c70), .in1 (s7c71), .outb
       (s7c7c6c51));
  mux2$ u_mux14(.s0 (cin), .in0 (s7c7c6c50), .in1 (s7c7c6c51), .outb
       (s[7]));
  mux2$ u_mux15(.s0 (c70), .in0 (c80), .in1 (c81), .outb (c8c70));
  mux2$ u_mux16(.s0 (c71), .in0 (c80), .in1 (c81), .outb (c8c71));
  mux2$ u_mux17(.s0 (c6c50), .in0 (c8c70), .in1 (c8c71), .outb
       (c8c7c6c50));
  mux2$ u_mux18(.s0 (c6c51), .in0 (c8c70), .in1 (c8c71), .outb
       (c8c7c6c51));
  mux2$ u_mux19(.s0 (cin), .in0 (c8c7c6c50), .in1 (c8c7c6c51), .outb
       (cout));
endmodule

module cond_sum8_c(A, B, CIN, S, COUT, c4);
  input [7:0] A, B;
  input CIN;
  output [7:0] S;
  output COUT, c4;
  wire [7:0] A, B;
  wire CIN;
  wire [7:0] S;
  wire COUT, c4;
  nibble_low u_nibble_low(.a (A[3:0]), .b (B[3:0]), .cin (CIN), .s
       (S[3:0]), .cout (c4));
  nibble_high u_nibble_high(.a (A[7:4]), .b (B[7:4]), .cin (c4), .s
       (S[7:4]), .cout (COUT));
endmodule

module cond_sum16_c(A, B, CIN, S, COUT, c8, c4);
  input [15:0] A, B;
  input CIN;
  output [15:0] S;
  output COUT, c8, c4;
  wire [15:0] A, B;
  wire CIN;
  wire [15:0] S;
  wire COUT, c8, c4;
  wire [15:0] S_temp;
  wire COUT0, COUT1, UNCONNECTED, UNCONNECTED0, n_37, n_38, n_39, n_40;
  wire n_41, n_42, n_43, n_44;
  cond_sum8_c u_cond_sum8_low(.A (A[7:0]), .B (B[7:0]), .CIN (CIN), .S
       (S[7:0]), .COUT (c8), .c4 (c4));
  cond_sum8_c u_cond_sum8_high0(.A (A[15:8]), .B (B[15:8]), .CIN
       (1'b0), .S ({n_37, n_38, n_39, n_40, n_41, n_42, n_43, n_44}),
       .COUT (COUT0), .c4 (UNCONNECTED));
  cond_sum8_c u_cond_sum8_high1(.A (A[15:8]), .B (B[15:8]), .CIN
       (1'b1), .S (S_temp[15:8]), .COUT (COUT1), .c4 (UNCONNECTED0));
  mux2$ \u_mux1[15] (.s0 (c8), .in0 (n_37), .in1 (S_temp[15]), .outb
       (S[15]));
  mux2$ \u_mux1[14] (.s0 (c8), .in0 (n_38), .in1 (S_temp[14]), .outb
       (S[14]));
  mux2$ \u_mux1[13] (.s0 (c8), .in0 (n_39), .in1 (S_temp[13]), .outb
       (S[13]));
  mux2$ \u_mux1[12] (.s0 (c8), .in0 (n_40), .in1 (S_temp[12]), .outb
       (S[12]));
  mux2$ \u_mux1[11] (.s0 (c8), .in0 (n_41), .in1 (S_temp[11]), .outb
       (S[11]));
  mux2$ \u_mux1[10] (.s0 (c8), .in0 (n_42), .in1 (S_temp[10]), .outb
       (S[10]));
  mux2$ \u_mux1[9] (.s0 (c8), .in0 (n_43), .in1 (S_temp[9]), .outb
       (S[9]));
  mux2$ \u_mux1[8] (.s0 (c8), .in0 (n_44), .in1 (S_temp[8]), .outb
       (S[8]));
  mux2$ u_mux2(.s0 (c8), .in0 (COUT0), .in1 (COUT1), .outb (COUT));
endmodule

module cond_sum32_c(A, B, CIN, S, COUT, c4, c8, c16);
  input [31:0] A, B;
  input CIN;
  output [31:0] S;
  output COUT, c4, c8, c16;
  wire [31:0] A, B;
  wire CIN;
  wire [31:0] S;
  wire COUT, c4, c8, c16;
  wire [31:0] S_temp;
  wire COUT0, COUT1, UNCONNECTED1, UNCONNECTED2, UNCONNECTED3,
       UNCONNECTED4, n_69, n_70;
  wire n_71, n_72, n_73, n_74, n_75, n_76, n_77, n_78;
  wire n_79, n_80, n_81, n_82, n_83, n_84;
  cond_sum16_c u_cond_sum16_low(.A (A[15:0]), .B (B[15:0]), .CIN (CIN),
       .S (S[15:0]), .COUT (c16), .c8 (c8), .c4 (c4));
  cond_sum16_c u_cond_sum16_high0(.A (A[31:16]), .B (B[31:16]), .CIN
       (1'b0), .S ({n_69, n_70, n_71, n_72, n_73, n_74, n_75, n_76,
       n_77, n_78, n_79, n_80, n_81, n_82, n_83, n_84}), .COUT (COUT0),
       .c8 (UNCONNECTED1), .c4 (UNCONNECTED2));
  cond_sum16_c u_cond_sum16_high1(.A (A[31:16]), .B (B[31:16]), .CIN
       (1'b1), .S (S_temp[31:16]), .COUT (COUT1), .c8 (UNCONNECTED3),
       .c4 (UNCONNECTED4));
  mux2$ \u_mux1[15] (.s0 (c16), .in0 (n_69), .in1 (S_temp[31]), .outb
       (S[31]));
  mux2$ \u_mux1[14] (.s0 (c16), .in0 (n_70), .in1 (S_temp[30]), .outb
       (S[30]));
  mux2$ \u_mux1[13] (.s0 (c16), .in0 (n_71), .in1 (S_temp[29]), .outb
       (S[29]));
  mux2$ \u_mux1[12] (.s0 (c16), .in0 (n_72), .in1 (S_temp[28]), .outb
       (S[28]));
  mux2$ \u_mux1[11] (.s0 (c16), .in0 (n_73), .in1 (S_temp[27]), .outb
       (S[27]));
  mux2$ \u_mux1[10] (.s0 (c16), .in0 (n_74), .in1 (S_temp[26]), .outb
       (S[26]));
  mux2$ \u_mux1[9] (.s0 (c16), .in0 (n_75), .in1 (S_temp[25]), .outb
       (S[25]));
  mux2$ \u_mux1[8] (.s0 (c16), .in0 (n_76), .in1 (S_temp[24]), .outb
       (S[24]));
  mux2$ \u_mux1[7] (.s0 (c16), .in0 (n_77), .in1 (S_temp[23]), .outb
       (S[23]));
  mux2$ \u_mux1[6] (.s0 (c16), .in0 (n_78), .in1 (S_temp[22]), .outb
       (S[22]));
  mux2$ \u_mux1[5] (.s0 (c16), .in0 (n_79), .in1 (S_temp[21]), .outb
       (S[21]));
  mux2$ \u_mux1[4] (.s0 (c16), .in0 (n_80), .in1 (S_temp[20]), .outb
       (S[20]));
  mux2$ \u_mux1[3] (.s0 (c16), .in0 (n_81), .in1 (S_temp[19]), .outb
       (S[19]));
  mux2$ \u_mux1[2] (.s0 (c16), .in0 (n_82), .in1 (S_temp[18]), .outb
       (S[18]));
  mux2$ \u_mux1[1] (.s0 (c16), .in0 (n_83), .in1 (S_temp[17]), .outb
       (S[17]));
  mux2$ \u_mux1[0] (.s0 (c16), .in0 (n_84), .in1 (S_temp[16]), .outb
       (S[16]));
  mux2$ u_mux2(.s0 (c16), .in0 (COUT0), .in1 (COUT1), .outb (COUT));
endmodule

module add_flags(A, B, s, c32, c16, c8, c4, flags, alu1_op_size);
  input [31:0] A, B, s;
  input c32, c16, c8, c4;
  input [1:0] alu1_op_size;
  output [5:0] flags;
  wire [31:0] A, B, s;
  wire c32, c16, c8, c4;
  wire [1:0] alu1_op_size;
  wire [5:0] flags;
  wire [5:0] flag8;
  wire [5:0] flag16;
  wire [5:0] flag32;
  wire msb_sign8, msb_sign16, msb_sign32, w_check8, w_check16,
       w_check32;
  zero8 u_z8(.in (s[7:0]), .out (flag8[3]));
  zero16 u_z16(.in (s[15:0]), .out (flag16[3]));
  zero32 u_z32(.in (s), .out (flag32[3]));
  parity u_par8(.in (s[7:0]), .out (flag8[1]));
  parity u_par16(.in (s[7:0]), .out (flag16[1]));
  parity u_par32(.in (s[7:0]), .out (flag32[1]));
  mux_nbit_4x1_N6 flag_mux(.a0 ({flag8[5], s[7], flag8[3], c4,
       flag8[1], c8}), .a1 ({flag16[5], s[15], flag16[3], c4,
       flag16[1], c16}), .a2 ({flag32[5], s[31], flag32[3], c4,
       flag32[1], c32}), .a3 (6'b000000), .sel (alu1_op_size), .out
       (flags));
  xnor2$ u_msb8(.in0 (A[7]), .in1 (B[7]), .out (msb_sign8));
  xnor2$ u_msb16(.in0 (A[15]), .in1 (B[15]), .out (msb_sign16));
  xnor2$ u_msb32(.in0 (A[31]), .in1 (B[31]), .out (msb_sign32));
  xor2$ u_check8(.in0 (A[7]), .in1 (s[7]), .out (w_check8));
  xor2$ u_check16(.in0 (A[15]), .in1 (s[15]), .out (w_check16));
  xor2$ u_check32(.in0 (A[31]), .in1 (s[31]), .out (w_check32));
  and2$ u_of8(.in0 (msb_sign8), .in1 (w_check8), .out (flag8[5]));
  and2$ u_of16(.in0 (msb_sign16), .in1 (w_check16), .out (flag16[5]));
  and2$ u_of32(.in0 (msb_sign32), .in1 (w_check32), .out (flag32[5]));
endmodule

module greater_than_for_af(in1, in2, gt_out);
  input [3:0] in1, in2;
  output gt_out;
  wire [3:0] in1, in2;
  wire gt_out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9, n_10, n_11, n_12;
  nand3$ g639(.in0 (n_10), .in1 (n_12), .in2 (n_6), .out (gt_out));
  nand4$ g640(.in0 (n_9), .in1 (n_8), .in2 (n_11), .in3 (n_2), .out
       (n_12));
  nand2$ g641(.in0 (n_7), .in1 (in2[1]), .out (n_11));
  nand3$ g644(.in0 (n_1), .in1 (n_9), .in2 (in1[2]), .out (n_10));
  nand2$ g642(.in0 (n_4), .in1 (n_0), .out (n_8));
  nand3$ g643(.in0 (in1[1]), .in1 (n_3), .in2 (in1[0]), .out (n_7));
  nand2$ g647(.in0 (n_5), .in1 (in1[3]), .out (n_6));
  or2$ g648(.in0 (n_5), .in1 (in1[3]), .out (n_9));
  nand2$ g645(.in0 (n_3), .in1 (in1[0]), .out (n_4));
  or2$ g646(.in0 (n_1), .in1 (in1[2]), .out (n_2));
  inv1$ g652(.in (in1[1]), .out (n_0));
  inv1$ g649(.in (in2[2]), .out (n_1));
  inv1$ g650(.in (in2[0]), .out (n_3));
  inv1$ g651(.in (in2[3]), .out (n_5));
endmodule

module greater_than_for_flags8(in1, in2, gt_out);
  input [7:0] in1, in2;
  output gt_out;
  wire [7:0] in1, in2;
  wire gt_out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9, n_10, n_11, n_12, n_13, n_14, n_15;
  wire n_16, n_17, n_18, n_19, n_20, n_21, n_22, n_23;
  wire n_24, n_25, n_26, n_27, n_28, n_29, n_30, n_31;
  wire n_32, n_33, n_34, n_35, n_36, n_37, n_38, n_39;
  wire n_40;
  nor2$ g4206(.in0 (n_40), .in1 (n_39), .out (gt_out));
  nor2$ g4208(.in0 (n_37), .in1 (n_38), .out (n_40));
  nand2$ g4207(.in0 (n_35), .in1 (n_36), .out (n_39));
  nand3$ g4212(.in0 (n_13), .in1 (n_34), .in2 (n_8), .out (n_38));
  nor2$ g4211(.in0 (n_33), .in1 (n_31), .out (n_37));
  nand2$ g4209(.in0 (n_30), .in1 (n_32), .out (n_36));
  nand2$ g4210(.in0 (n_34), .in1 (n_28), .out (n_35));
  nor2$ g4214(.in0 (n_29), .in1 (n_27), .out (n_33));
  nand2$ g4213(.in0 (n_26), .in1 (n_5), .out (n_32));
  nor3$ g4215(.in0 (n_18), .in1 (n_21), .in2 (n_17), .out (n_34));
  nand2$ g4216(.in0 (n_12), .in1 (n_9), .out (n_31));
  nand2$ g4217(.in0 (n_15), .in1 (in1[7]), .out (n_30));
  nand2$ g4218(.in0 (n_24), .in1 (n_23), .out (n_29));
  nand2$ g4219(.in0 (n_20), .in1 (n_11), .out (n_28));
  nor2$ g4221(.in0 (n_25), .in1 (n_19), .out (n_27));
  nand2$ g4220(.in0 (n_7), .in1 (in2[6]), .out (n_26));
  nor2$ g4226(.in0 (n_22), .in1 (in1[1]), .out (n_25));
  nand2$ g4227(.in0 (n_1), .in1 (in1[2]), .out (n_24));
  nand2$ g4228(.in0 (n_22), .in1 (in1[1]), .out (n_23));
  nor2$ g4229(.in0 (n_14), .in1 (in2[6]), .out (n_21));
  nand2$ g4235(.in0 (n_16), .in1 (in2[5]), .out (n_20));
  nand2$ g4230(.in0 (n_0), .in1 (in1[0]), .out (n_19));
  nor2$ g4231(.in0 (n_2), .in1 (in2[7]), .out (n_18));
  nor2$ g4232(.in0 (n_16), .in1 (in2[5]), .out (n_17));
  nand2$ g4233(.in0 (n_14), .in1 (in2[6]), .out (n_15));
  or2$ g4234(.in0 (n_10), .in1 (in2[4]), .out (n_13));
  nand2$ g4222(.in0 (n_4), .in1 (in2[3]), .out (n_12));
  nand2$ g4223(.in0 (n_10), .in1 (in2[4]), .out (n_11));
  nand2$ g4224(.in0 (n_3), .in1 (in2[2]), .out (n_9));
  nand2$ g4225(.in0 (n_6), .in1 (in1[3]), .out (n_8));
  nor2$ g4236(.in0 (in1[7]), .in1 (in1[6]), .out (n_7));
  inv1$ g4240(.in (in1[4]), .out (n_10));
  inv1$ g4245(.in (in2[3]), .out (n_6));
  inv1$ g4242(.in (in2[7]), .out (n_5));
  inv1$ g4247(.in (in1[3]), .out (n_4));
  inv1$ g4239(.in (in1[6]), .out (n_14));
  inv1$ g4237(.in (in1[5]), .out (n_16));
  inv1$ g4243(.in (in1[2]), .out (n_3));
  inv1$ g4244(.in (in1[7]), .out (n_2));
  inv1$ g4241(.in (in2[2]), .out (n_1));
  inv1$ g4246(.in (in2[0]), .out (n_0));
  inv1$ g4238(.in (in2[1]), .out (n_22));
endmodule

module greater_than_for_flags16(in1, in2, gt_out);
  input [15:0] in1, in2;
  output gt_out;
  wire [15:0] in1, in2;
  wire gt_out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9, n_10, n_11, n_12, n_13, n_14, n_15;
  wire n_16, n_17, n_18, n_19, n_20, n_21, n_22, n_23;
  wire n_24, n_25, n_26, n_27, n_28, n_29, n_30, n_31;
  wire n_32, n_33, n_34, n_35, n_36, n_37, n_38, n_39;
  wire n_40, n_41, n_42, n_43, n_44, n_45, n_46, n_47;
  wire n_48, n_49, n_50, n_51, n_52, n_53, n_54, n_55;
  wire n_56, n_57, n_58, n_59, n_60, n_61, n_62, n_63;
  wire n_64, n_65, n_66, n_67, n_68, n_69, n_70, n_71;
  wire n_72, n_73, n_74, n_75, n_76, n_77, n_78, n_79;
  wire n_80, n_81, n_82;
  nor2$ g8029(.in0 (n_82), .in1 (n_81), .out (gt_out));
  nor2$ g8030(.in0 (n_79), .in1 (n_76), .out (n_82));
  nand2$ g8031(.in0 (n_80), .in1 (n_78), .out (n_81));
  nand2$ g8032(.in0 (n_77), .in1 (n_75), .out (n_80));
  nor2$ g8033(.in0 (n_74), .in1 (n_73), .out (n_79));
  nor3$ g8037(.in0 (n_58), .in1 (n_72), .in2 (n_29), .out (n_78));
  nand2$ g8035(.in0 (n_63), .in1 (n_70), .out (n_77));
  nand4$ g8042(.in0 (n_61), .in1 (n_62), .in2 (n_75), .in3 (n_10), .out
       (n_76));
  nor2$ g8034(.in0 (n_71), .in1 (n_67), .out (n_74));
  nand2$ g8036(.in0 (n_60), .in1 (n_69), .out (n_73));
  nor2$ g8038(.in0 (n_68), .in1 (n_64), .out (n_72));
  nor2$ g8041(.in0 (n_59), .in1 (n_50), .out (n_71));
  nand3$ g8043(.in0 (n_53), .in1 (n_57), .in2 (n_45), .out (n_70));
  nand3$ g8039(.in0 (n_52), .in1 (n_65), .in2 (n_66), .out (n_69));
  nor2$ g8045(.in0 (n_56), .in1 (n_37), .out (n_68));
  nand4$ g8040(.in0 (n_18), .in1 (n_66), .in2 (n_65), .in3 (n_26), .out
       (n_67));
  nor3$ g8048(.in0 (n_55), .in1 (n_64), .in2 (n_15), .out (n_75));
  nand4$ g8044(.in0 (n_62), .in1 (n_48), .in2 (n_51), .in3 (n_61), .out
       (n_63));
  nand2$ g8046(.in0 (n_54), .in1 (n_66), .out (n_60));
  nor2$ g8047(.in0 (n_49), .in1 (n_46), .out (n_59));
  nor3$ g8060(.in0 (n_12), .in1 (n_41), .in2 (in1[14]), .out (n_58));
  nand2$ g8059(.in0 (n_43), .in1 (in1[11]), .out (n_57));
  nor3$ g8061(.in0 (n_14), .in1 (n_55), .in2 (in1[12]), .out (n_56));
  nand2$ g8049(.in0 (n_39), .in1 (n_38), .out (n_54));
  nor2$ g8050(.in0 (n_24), .in1 (n_34), .out (n_65));
  or2$ g8051(.in0 (n_42), .in1 (in2[11]), .out (n_53));
  nand2$ g8052(.in0 (n_32), .in1 (n_30), .out (n_52));
  nand2$ g8053(.in0 (n_47), .in1 (n_27), .out (n_51));
  nand2$ g8054(.in0 (n_35), .in1 (n_33), .out (n_50));
  nand2$ g8055(.in0 (n_22), .in1 (n_21), .out (n_49));
  nand2$ g8056(.in0 (n_47), .in1 (in1[9]), .out (n_48));
  nor2$ g8057(.in0 (n_44), .in1 (n_19), .out (n_62));
  nand2$ g8058(.in0 (n_40), .in1 (n_13), .out (n_64));
  nor2$ g8062(.in0 (n_36), .in1 (n_16), .out (n_46));
  inv1$ g8065(.in (n_44), .out (n_45));
  inv1$ g8063(.in (n_42), .out (n_43));
  inv1$ g8064(.in (n_40), .out (n_41));
  nand2$ g8066(.in0 (n_11), .in1 (in2[7]), .out (n_39));
  nor2$ g8067(.in0 (n_0), .in1 (in1[10]), .out (n_42));
  nand2$ g8068(.in0 (n_23), .in1 (in2[6]), .out (n_38));
  nor2$ g8069(.in0 (n_1), .in1 (in1[13]), .out (n_37));
  nor2$ g8070(.in0 (n_20), .in1 (in1[1]), .out (n_36));
  nand2$ g8071(.in0 (n_25), .in1 (in2[3]), .out (n_35));
  nor2$ g8072(.in0 (n_31), .in1 (in2[5]), .out (n_34));
  nand2$ g8073(.in0 (n_28), .in1 (in1[15]), .out (n_40));
  nand2$ g8081(.in0 (n_4), .in1 (in2[2]), .out (n_33));
  nand2$ g8074(.in0 (n_31), .in1 (in2[5]), .out (n_32));
  nand2$ g8075(.in0 (n_17), .in1 (in2[4]), .out (n_30));
  nor2$ g8076(.in0 (n_2), .in1 (in2[11]), .out (n_44));
  nor2$ g8077(.in0 (n_28), .in1 (in1[15]), .out (n_29));
  nor2$ g8078(.in0 (n_8), .in1 (in2[13]), .out (n_55));
  nand2$ g8079(.in0 (n_27), .in1 (in1[9]), .out (n_61));
  or2$ g8080(.in0 (n_25), .in1 (in2[3]), .out (n_26));
  nand2$ g8082(.in0 (n_9), .in1 (in2[8]), .out (n_47));
  nor2$ g8083(.in0 (n_23), .in1 (in2[6]), .out (n_24));
  nand2$ g8084(.in0 (n_5), .in1 (in1[2]), .out (n_22));
  nand2$ g8085(.in0 (n_20), .in1 (in1[1]), .out (n_21));
  nor2$ g8086(.in0 (n_3), .in1 (in2[10]), .out (n_19));
  or2$ g8087(.in0 (n_17), .in1 (in2[4]), .out (n_18));
  nand2$ g8088(.in0 (n_6), .in1 (in1[0]), .out (n_16));
  and2$ g8090(.in0 (n_14), .in1 (in1[12]), .out (n_15));
  nand2$ g8091(.in0 (n_12), .in1 (in1[14]), .out (n_13));
  or2$ g8092(.in0 (n_11), .in1 (in2[7]), .out (n_66));
  nand2$ g8089(.in0 (n_7), .in1 (in1[8]), .out (n_10));
  inv1$ g8102(.in (in1[8]), .out (n_9));
  inv1$ g8110(.in (in1[13]), .out (n_8));
  inv1$ g8108(.in (in2[8]), .out (n_7));
  inv1$ g8112(.in (in1[3]), .out (n_25));
  inv1$ g8100(.in (in1[5]), .out (n_31));
  inv1$ g8094(.in (in2[0]), .out (n_6));
  inv1$ g8103(.in (in2[2]), .out (n_5));
  inv1$ g8105(.in (in1[7]), .out (n_11));
  inv1$ g8098(.in (in2[15]), .out (n_28));
  inv1$ g8093(.in (in2[9]), .out (n_27));
  inv1$ g8095(.in (in1[2]), .out (n_4));
  inv1$ g8111(.in (in2[1]), .out (n_20));
  inv1$ g8104(.in (in1[10]), .out (n_3));
  inv1$ g8101(.in (in1[11]), .out (n_2));
  inv1$ g8106(.in (in2[12]), .out (n_14));
  inv1$ g8099(.in (in2[13]), .out (n_1));
  inv1$ g8109(.in (in2[10]), .out (n_0));
  inv1$ g8107(.in (in2[14]), .out (n_12));
  inv1$ g8096(.in (in1[4]), .out (n_17));
  inv1$ g8097(.in (in1[6]), .out (n_23));
endmodule

module greater_than_for_flags32(in1, in2, gt_out);
  input [31:0] in1, in2;
  output gt_out;
  wire [31:0] in1, in2;
  wire gt_out;
  wire gt_6_31_n_0, gt_6_31_n_1, gt_6_31_n_2, gt_6_31_n_3, gt_6_31_n_4,
       gt_6_31_n_5, gt_6_31_n_6, gt_6_31_n_7;
  wire gt_6_31_n_8, gt_6_31_n_9, gt_6_31_n_10, gt_6_31_n_11,
       gt_6_31_n_12, gt_6_31_n_13, gt_6_31_n_14, gt_6_31_n_15;
  wire gt_6_31_n_16, gt_6_31_n_17, gt_6_31_n_18, gt_6_31_n_19,
       gt_6_31_n_20, gt_6_31_n_21, gt_6_31_n_22, gt_6_31_n_23;
  wire gt_6_31_n_24, gt_6_31_n_25, gt_6_31_n_26, gt_6_31_n_27,
       gt_6_31_n_28, gt_6_31_n_29, gt_6_31_n_30, gt_6_31_n_31;
  wire gt_6_31_n_32, gt_6_31_n_33, gt_6_31_n_34, gt_6_31_n_35,
       gt_6_31_n_36, gt_6_31_n_37, gt_6_31_n_38, gt_6_31_n_39;
  wire gt_6_31_n_40, gt_6_31_n_41, gt_6_31_n_42, gt_6_31_n_43,
       gt_6_31_n_44, gt_6_31_n_45, gt_6_31_n_46, gt_6_31_n_47;
  wire gt_6_31_n_48, gt_6_31_n_49, gt_6_31_n_50, gt_6_31_n_51,
       gt_6_31_n_52, gt_6_31_n_53, gt_6_31_n_54, gt_6_31_n_55;
  wire gt_6_31_n_56, gt_6_31_n_57, gt_6_31_n_58, gt_6_31_n_59,
       gt_6_31_n_60, gt_6_31_n_61, gt_6_31_n_62, gt_6_31_n_63;
  wire gt_6_31_n_64, gt_6_31_n_65, gt_6_31_n_66, gt_6_31_n_67,
       gt_6_31_n_68, gt_6_31_n_69, gt_6_31_n_70, gt_6_31_n_71;
  wire gt_6_31_n_72, gt_6_31_n_73, gt_6_31_n_74, gt_6_31_n_75,
       gt_6_31_n_76, gt_6_31_n_77, gt_6_31_n_78, gt_6_31_n_79;
  wire gt_6_31_n_80, gt_6_31_n_81, gt_6_31_n_82, gt_6_31_n_83,
       gt_6_31_n_84, gt_6_31_n_85, gt_6_31_n_86, gt_6_31_n_87;
  wire gt_6_31_n_88, gt_6_31_n_89, gt_6_31_n_90, gt_6_31_n_91,
       gt_6_31_n_92, gt_6_31_n_93, gt_6_31_n_94, gt_6_31_n_95;
  wire gt_6_31_n_96, gt_6_31_n_97, gt_6_31_n_98, gt_6_31_n_99,
       gt_6_31_n_100, gt_6_31_n_101, gt_6_31_n_102, gt_6_31_n_103;
  wire gt_6_31_n_104, gt_6_31_n_105, gt_6_31_n_106, gt_6_31_n_107,
       gt_6_31_n_108, gt_6_31_n_109, gt_6_31_n_110, gt_6_31_n_111;
  wire gt_6_31_n_112, gt_6_31_n_113, gt_6_31_n_114, gt_6_31_n_115,
       gt_6_31_n_116, gt_6_31_n_117, gt_6_31_n_118, gt_6_31_n_119;
  wire gt_6_31_n_120, gt_6_31_n_121, gt_6_31_n_122, gt_6_31_n_123,
       gt_6_31_n_124, gt_6_31_n_125, gt_6_31_n_126, gt_6_31_n_127;
  wire gt_6_31_n_128, gt_6_31_n_129, gt_6_31_n_130, gt_6_31_n_131,
       gt_6_31_n_132, gt_6_31_n_133, gt_6_31_n_134, gt_6_31_n_135;
  wire gt_6_31_n_136, gt_6_31_n_137, gt_6_31_n_138, gt_6_31_n_139,
       gt_6_31_n_140, gt_6_31_n_141, gt_6_31_n_142, gt_6_31_n_143;
  wire gt_6_31_n_144, gt_6_31_n_145, gt_6_31_n_146, gt_6_31_n_147,
       gt_6_31_n_148, gt_6_31_n_149, gt_6_31_n_150, gt_6_31_n_151;
  wire gt_6_31_n_152, gt_6_31_n_153, gt_6_31_n_154, gt_6_31_n_155,
       gt_6_31_n_156, gt_6_31_n_157, gt_6_31_n_158, gt_6_31_n_159;
  wire gt_6_31_n_160, gt_6_31_n_161, gt_6_31_n_162, gt_6_31_n_163,
       gt_6_31_n_164, gt_6_31_n_165, gt_6_31_n_166;
  nor2$ gt_6_31_g6471(.in0 (gt_6_31_n_166), .in1 (gt_6_31_n_164), .out
       (gt_out));
  nor2$ gt_6_31_g6472(.in0 (gt_6_31_n_165), .in1 (gt_6_31_n_157), .out
       (gt_6_31_n_166));
  nor3$ gt_6_31_g6473(.in0 (gt_6_31_n_163), .in1 (gt_6_31_n_162), .in2
       (gt_6_31_n_148), .out (gt_6_31_n_165));
  nand4$ gt_6_31_g6474(.in0 (gt_6_31_n_159), .in1 (gt_6_31_n_160), .in2
       (gt_6_31_n_161), .in3 (gt_6_31_n_156), .out (gt_6_31_n_164));
  nand4$ gt_6_31_g6475(.in0 (gt_6_31_n_144), .in1 (gt_6_31_n_158), .in2
       (gt_6_31_n_151), .in3 (gt_6_31_n_152), .out (gt_6_31_n_163));
  nor2$ gt_6_31_g6476(.in0 (gt_6_31_n_155), .in1 (gt_6_31_n_153), .out
       (gt_6_31_n_162));
  nand2$ gt_6_31_g6477(.in0 (gt_6_31_n_149), .in1 (gt_6_31_n_128), .out
       (gt_6_31_n_161));
  nand2$ gt_6_31_g6478(.in0 (gt_6_31_n_150), .in1 (gt_6_31_n_141), .out
       (gt_6_31_n_160));
  nand3$ gt_6_31_g6479(.in0 (gt_6_31_n_141), .in1 (gt_6_31_n_154), .in2
       (gt_6_31_n_127), .out (gt_6_31_n_159));
  nand2$ gt_6_31_g6480(.in0 (gt_6_31_n_139), .in1 (gt_6_31_n_125), .out
       (gt_6_31_n_158));
  nand2$ gt_6_31_g6481(.in0 (gt_6_31_n_141), .in1 (gt_6_31_n_138), .out
       (gt_6_31_n_157));
  nor3$ gt_6_31_g6482(.in0 (gt_6_31_n_107), .in1 (gt_6_31_n_143), .in2
       (gt_6_31_n_49), .out (gt_6_31_n_156));
  nor2$ gt_6_31_g6483(.in0 (gt_6_31_n_140), .in1 (gt_6_31_n_134), .out
       (gt_6_31_n_155));
  nand3$ gt_6_31_g6484(.in0 (gt_6_31_n_104), .in1 (gt_6_31_n_145), .in2
       (gt_6_31_n_73), .out (gt_6_31_n_154));
  nand4$ gt_6_31_g6485(.in0 (gt_6_31_n_87), .in1 (gt_6_31_n_120), .in2
       (gt_6_31_n_139), .in3 (gt_6_31_n_52), .out (gt_6_31_n_153));
  nand3$ gt_6_31_g6486(.in0 (gt_6_31_n_130), .in1 (gt_6_31_n_124), .in2
       (gt_6_31_n_114), .out (gt_6_31_n_152));
  nand3$ gt_6_31_g6487(.in0 (gt_6_31_n_123), .in1 (gt_6_31_n_139), .in2
       (gt_6_31_n_120), .out (gt_6_31_n_151));
  nand3$ gt_6_31_g6488(.in0 (gt_6_31_n_99), .in1 (gt_6_31_n_147), .in2
       (gt_6_31_n_51), .out (gt_6_31_n_150));
  nand3$ gt_6_31_g6489(.in0 (gt_6_31_n_110), .in1 (gt_6_31_n_146), .in2
       (gt_6_31_n_83), .out (gt_6_31_n_149));
  nand3$ gt_6_31_g6490(.in0 (gt_6_31_n_98), .in1 (gt_6_31_n_142), .in2
       (gt_6_31_n_48), .out (gt_6_31_n_148));
  nand2$ gt_6_31_g6491(.in0 (gt_6_31_n_135), .in1 (gt_6_31_n_117), .out
       (gt_6_31_n_147));
  nand2$ gt_6_31_g6492(.in0 (gt_6_31_n_132), .in1 (gt_6_31_n_121), .out
       (gt_6_31_n_146));
  nand2$ gt_6_31_g6493(.in0 (gt_6_31_n_131), .in1 (gt_6_31_n_119), .out
       (gt_6_31_n_145));
  nand2$ gt_6_31_g6494(.in0 (gt_6_31_n_126), .in1 (gt_6_31_n_130), .out
       (gt_6_31_n_144));
  nor2$ gt_6_31_g6495(.in0 (gt_6_31_n_137), .in1 (gt_6_31_n_118), .out
       (gt_6_31_n_143));
  nand2$ gt_6_31_g6496(.in0 (gt_6_31_n_136), .in1 (gt_6_31_n_113), .out
       (gt_6_31_n_142));
  and4$ gt_6_31_g6497(.in0 (gt_6_31_n_68), .in1 (gt_6_31_n_121), .in2
       (gt_6_31_n_128), .in3 (gt_6_31_n_74), .out (gt_6_31_n_141));
  nor2$ gt_6_31_g6498(.in0 (gt_6_31_n_133), .in1 (gt_6_31_n_116), .out
       (gt_6_31_n_140));
  nor2$ gt_6_31_g6499(.in0 (gt_6_31_n_129), .in1 (gt_6_31_n_122), .out
       (gt_6_31_n_139));
  and4$ gt_6_31_g6500(.in0 (gt_6_31_n_66), .in1 (gt_6_31_n_119), .in2
       (gt_6_31_n_127), .in3 (gt_6_31_n_50), .out (gt_6_31_n_138));
  nor2$ gt_6_31_g6501(.in0 (gt_6_31_n_105), .in1 (gt_6_31_n_79), .out
       (gt_6_31_n_137));
  nand2$ gt_6_31_g6502(.in0 (gt_6_31_n_112), .in1 (gt_6_31_n_84), .out
       (gt_6_31_n_136));
  nand2$ gt_6_31_g6503(.in0 (gt_6_31_n_109), .in1 (gt_6_31_n_82), .out
       (gt_6_31_n_135));
  nand2$ gt_6_31_g6504(.in0 (gt_6_31_n_108), .in1 (gt_6_31_n_81), .out
       (gt_6_31_n_134));
  nor2$ gt_6_31_g6505(.in0 (gt_6_31_n_115), .in1 (gt_6_31_n_77), .out
       (gt_6_31_n_133));
  nand2$ gt_6_31_g6506(.in0 (gt_6_31_n_103), .in1 (gt_6_31_n_60), .out
       (gt_6_31_n_132));
  nand2$ gt_6_31_g6507(.in0 (gt_6_31_n_102), .in1 (gt_6_31_n_59), .out
       (gt_6_31_n_131));
  inv1$ gt_6_31_g6508(.in (gt_6_31_n_129), .out (gt_6_31_n_130));
  nand2$ gt_6_31_g6509(.in0 (gt_6_31_n_106), .in1 (gt_6_31_n_56), .out
       (gt_6_31_n_126));
  nand2$ gt_6_31_g6510(.in0 (gt_6_31_n_101), .in1 (gt_6_31_n_54), .out
       (gt_6_31_n_125));
  nand2$ gt_6_31_g6511(.in0 (gt_6_31_n_100), .in1 (gt_6_31_n_53), .out
       (gt_6_31_n_124));
  nand2$ gt_6_31_g6512(.in0 (gt_6_31_n_111), .in1 (gt_6_31_n_55), .out
       (gt_6_31_n_123));
  nand4$ gt_6_31_g6513(.in0 (gt_6_31_n_97), .in1 (gt_6_31_n_63), .in2
       (gt_6_31_n_64), .in3 (gt_6_31_n_62), .out (gt_6_31_n_129));
  nand4$ gt_6_31_g6514(.in0 (gt_6_31_n_67), .in1 (gt_6_31_n_69), .in2
       (gt_6_31_n_70), .in3 (gt_6_31_n_57), .out (gt_6_31_n_122));
  nor3$ gt_6_31_g6515(.in0 (gt_6_31_n_90), .in1 (gt_6_31_n_118), .in2
       (gt_6_31_n_47), .out (gt_6_31_n_128));
  nor4$ gt_6_31_g6516(.in0 (gt_6_31_n_93), .in1 (gt_6_31_n_96), .in2
       (gt_6_31_n_65), .in3 (gt_6_31_n_71), .out (gt_6_31_n_127));
  nor2$ gt_6_31_g6517(.in0 (gt_6_31_n_65), .in1 (gt_6_31_n_96), .out
       (gt_6_31_n_117));
  nand2$ gt_6_31_g6518(.in0 (gt_6_31_n_91), .in1 (gt_6_31_n_78), .out
       (gt_6_31_n_116));
  nor2$ gt_6_31_g6519(.in0 (gt_6_31_n_76), .in1 (gt_6_31_n_75), .out
       (gt_6_31_n_115));
  nor2$ gt_6_31_g6520(.in0 (gt_6_31_n_94), .in1 (gt_6_31_n_72), .out
       (gt_6_31_n_121));
  nor2$ gt_6_31_g6521(.in0 (gt_6_31_n_89), .in1 (gt_6_31_n_61), .out
       (gt_6_31_n_120));
  and2$ gt_6_31_g6522(.in0 (gt_6_31_n_70), .in1 (gt_6_31_n_69), .out
       (gt_6_31_n_114));
  nor2$ gt_6_31_g6523(.in0 (gt_6_31_n_85), .in1 (gt_6_31_n_58), .out
       (gt_6_31_n_119));
  nand2$ gt_6_31_g6524(.in0 (gt_6_31_n_86), .in1 (gt_6_31_n_80), .out
       (gt_6_31_n_118));
  and2$ gt_6_31_g6525(.in0 (gt_6_31_n_64), .in1 (gt_6_31_n_63), .out
       (gt_6_31_n_113));
  nand3$ gt_6_31_g6526(.in0 (gt_6_31_n_28), .in1 (gt_6_31_n_97), .in2
       (in2[12]), .out (gt_6_31_n_112));
  nand3$ gt_6_31_g6527(.in0 (gt_6_31_n_2), .in1 (gt_6_31_n_87), .in2
       (in2[4]), .out (gt_6_31_n_111));
  nand3$ gt_6_31_g6528(.in0 (gt_6_31_n_40), .in1 (gt_6_31_n_95), .in2
       (in2[26]), .out (gt_6_31_n_110));
  nand3$ gt_6_31_g6529(.in0 (gt_6_31_n_24), .in1 (gt_6_31_n_92), .in2
       (in2[20]), .out (gt_6_31_n_109));
  nand3$ gt_6_31_g6530(.in0 (gt_6_31_n_25), .in1 (gt_6_31_n_91), .in2
       (in2[2]), .out (gt_6_31_n_108));
  and3$ gt_6_31_g6531(.in0 (gt_6_31_n_8), .in1 (gt_6_31_n_86), .in2
       (in2[30]), .out (gt_6_31_n_107));
  nand3$ gt_6_31_g6532(.in0 (gt_6_31_n_6), .in1 (gt_6_31_n_70), .in2
       (in2[10]), .out (gt_6_31_n_106));
  nor3$ gt_6_31_g6533(.in0 (gt_6_31_n_32), .in1 (gt_6_31_n_90), .in2
       (in1[28]), .out (gt_6_31_n_105));
  or3$ gt_6_31_g6534(.in0 (gt_6_31_n_29), .in1 (gt_6_31_n_85), .in2
       (in1[18]), .out (gt_6_31_n_104));
  nand3$ gt_6_31_g6535(.in0 (gt_6_31_n_31), .in1 (gt_6_31_n_68), .in2
       (in2[24]), .out (gt_6_31_n_103));
  nand3$ gt_6_31_g6536(.in0 (gt_6_31_n_23), .in1 (gt_6_31_n_66), .in2
       (in2[16]), .out (gt_6_31_n_102));
  nand3$ gt_6_31_g6537(.in0 (gt_6_31_n_18), .in1 (gt_6_31_n_88), .in2
       (in2[6]), .out (gt_6_31_n_101));
  nand3$ gt_6_31_g6538(.in0 (gt_6_31_n_36), .in1 (gt_6_31_n_67), .in2
       (in2[8]), .out (gt_6_31_n_100));
  or3$ gt_6_31_g6539(.in0 (gt_6_31_n_12), .in1 (gt_6_31_n_65), .in2
       (in1[22]), .out (gt_6_31_n_99));
  nand3$ gt_6_31_g6540(.in0 (gt_6_31_n_5), .in1 (gt_6_31_n_64), .in2
       (in2[14]), .out (gt_6_31_n_98));
  inv1$ gt_6_31_g6541(.in (gt_6_31_n_94), .out (gt_6_31_n_95));
  inv1$ gt_6_31_g6542(.in (gt_6_31_n_92), .out (gt_6_31_n_93));
  inv1$ gt_6_31_g6543(.in (gt_6_31_n_88), .out (gt_6_31_n_89));
  nand2$ gt_6_31_g6544(.in0 (gt_6_31_n_41), .in1 (in2[13]), .out
       (gt_6_31_n_84));
  nand2$ gt_6_31_g6545(.in0 (gt_6_31_n_0), .in1 (in2[27]), .out
       (gt_6_31_n_83));
  nand2$ gt_6_31_g6546(.in0 (gt_6_31_n_16), .in1 (in1[13]), .out
       (gt_6_31_n_97));
  and2$ gt_6_31_g6547(.in0 (gt_6_31_n_12), .in1 (in1[22]), .out
       (gt_6_31_n_96));
  nand2$ gt_6_31_g6548(.in0 (gt_6_31_n_19), .in1 (in2[21]), .out
       (gt_6_31_n_82));
  nand2$ gt_6_31_g6549(.in0 (gt_6_31_n_22), .in1 (in2[3]), .out
       (gt_6_31_n_81));
  nand2$ gt_6_31_g6550(.in0 (gt_6_31_n_15), .in1 (in1[30]), .out
       (gt_6_31_n_80));
  nor2$ gt_6_31_g6551(.in0 (gt_6_31_n_0), .in1 (in2[27]), .out
       (gt_6_31_n_94));
  nand2$ gt_6_31_g6552(.in0 (gt_6_31_n_9), .in1 (in1[21]), .out
       (gt_6_31_n_92));
  nand2$ gt_6_31_g6553(.in0 (gt_6_31_n_21), .in1 (in1[3]), .out
       (gt_6_31_n_91));
  nor2$ gt_6_31_g6554(.in0 (gt_6_31_n_35), .in1 (in1[29]), .out
       (gt_6_31_n_79));
  or2$ gt_6_31_g6555(.in0 (gt_6_31_n_25), .in1 (in2[2]), .out
       (gt_6_31_n_78));
  nor2$ gt_6_31_g6556(.in0 (gt_6_31_n_7), .in1 (in1[1]), .out
       (gt_6_31_n_77));
  nor2$ gt_6_31_g6557(.in0 (gt_6_31_n_42), .in1 (in2[29]), .out
       (gt_6_31_n_90));
  nor2$ gt_6_31_g6558(.in0 (gt_6_31_n_33), .in1 (in2[1]), .out
       (gt_6_31_n_76));
  nor2$ gt_6_31_g6559(.in0 (gt_6_31_n_4), .in1 (in2[0]), .out
       (gt_6_31_n_75));
  or2$ gt_6_31_g6560(.in0 (gt_6_31_n_31), .in1 (in2[24]), .out
       (gt_6_31_n_74));
  nand2$ gt_6_31_g6561(.in0 (gt_6_31_n_38), .in1 (in1[7]), .out
       (gt_6_31_n_88));
  nand2$ gt_6_31_g6562(.in0 (gt_6_31_n_10), .in1 (in2[19]), .out
       (gt_6_31_n_73));
  nor2$ gt_6_31_g6563(.in0 (gt_6_31_n_40), .in1 (in2[26]), .out
       (gt_6_31_n_72));
  nand2$ gt_6_31_g6564(.in0 (gt_6_31_n_30), .in1 (in1[5]), .out
       (gt_6_31_n_87));
  nand2$ gt_6_31_g6565(.in0 (gt_6_31_n_13), .in1 (in1[31]), .out
       (gt_6_31_n_86));
  nor2$ gt_6_31_g6566(.in0 (gt_6_31_n_10), .in1 (in2[19]), .out
       (gt_6_31_n_85));
  nor2$ gt_6_31_g6567(.in0 (gt_6_31_n_24), .in1 (in2[20]), .out
       (gt_6_31_n_71));
  nand2$ gt_6_31_g6568(.in0 (gt_6_31_n_1), .in1 (in1[12]), .out
       (gt_6_31_n_62));
  nor2$ gt_6_31_g6569(.in0 (gt_6_31_n_18), .in1 (in2[6]), .out
       (gt_6_31_n_61));
  nand2$ gt_6_31_g6570(.in0 (gt_6_31_n_45), .in1 (in2[25]), .out
       (gt_6_31_n_60));
  nand2$ gt_6_31_g6571(.in0 (gt_6_31_n_39), .in1 (in2[17]), .out
       (gt_6_31_n_59));
  nand2$ gt_6_31_g6572(.in0 (gt_6_31_n_17), .in1 (in1[11]), .out
       (gt_6_31_n_70));
  nand2$ gt_6_31_g6573(.in0 (gt_6_31_n_34), .in1 (in1[10]), .out
       (gt_6_31_n_69));
  and2$ gt_6_31_g6574(.in0 (gt_6_31_n_29), .in1 (in1[18]), .out
       (gt_6_31_n_58));
  nand2$ gt_6_31_g6575(.in0 (gt_6_31_n_46), .in1 (in1[25]), .out
       (gt_6_31_n_68));
  nand2$ gt_6_31_g6576(.in0 (gt_6_31_n_3), .in1 (in1[8]), .out
       (gt_6_31_n_57));
  nand2$ gt_6_31_g6577(.in0 (gt_6_31_n_11), .in1 (in2[11]), .out
       (gt_6_31_n_56));
  or2$ gt_6_31_g6578(.in0 (gt_6_31_n_30), .in1 (in1[5]), .out
       (gt_6_31_n_55));
  or2$ gt_6_31_g6579(.in0 (gt_6_31_n_38), .in1 (in1[7]), .out
       (gt_6_31_n_54));
  nand2$ gt_6_31_g6580(.in0 (gt_6_31_n_44), .in1 (in2[9]), .out
       (gt_6_31_n_53));
  or2$ gt_6_31_g6581(.in0 (gt_6_31_n_2), .in1 (in2[4]), .out
       (gt_6_31_n_52));
  nand2$ gt_6_31_g6582(.in0 (gt_6_31_n_37), .in1 (in1[9]), .out
       (gt_6_31_n_67));
  nand2$ gt_6_31_g6583(.in0 (gt_6_31_n_27), .in1 (in2[23]), .out
       (gt_6_31_n_51));
  or2$ gt_6_31_g6584(.in0 (gt_6_31_n_23), .in1 (in2[16]), .out
       (gt_6_31_n_50));
  nor2$ gt_6_31_g6585(.in0 (gt_6_31_n_13), .in1 (in1[31]), .out
       (gt_6_31_n_49));
  nand2$ gt_6_31_g6586(.in0 (gt_6_31_n_14), .in1 (in1[17]), .out
       (gt_6_31_n_66));
  nand2$ gt_6_31_g6587(.in0 (gt_6_31_n_20), .in1 (in2[15]), .out
       (gt_6_31_n_48));
  and2$ gt_6_31_g6588(.in0 (gt_6_31_n_32), .in1 (in1[28]), .out
       (gt_6_31_n_47));
  nor2$ gt_6_31_g6589(.in0 (gt_6_31_n_27), .in1 (in2[23]), .out
       (gt_6_31_n_65));
  nand2$ gt_6_31_g6590(.in0 (gt_6_31_n_26), .in1 (in1[15]), .out
       (gt_6_31_n_64));
  nand2$ gt_6_31_g6591(.in0 (gt_6_31_n_43), .in1 (in1[14]), .out
       (gt_6_31_n_63));
  inv1$ gt_6_31_g6592(.in (in2[25]), .out (gt_6_31_n_46));
  inv1$ gt_6_31_g6593(.in (in1[25]), .out (gt_6_31_n_45));
  inv1$ gt_6_31_g6594(.in (in1[9]), .out (gt_6_31_n_44));
  inv1$ gt_6_31_g6595(.in (in2[14]), .out (gt_6_31_n_43));
  inv1$ gt_6_31_g6596(.in (in1[29]), .out (gt_6_31_n_42));
  inv1$ gt_6_31_g6597(.in (in1[13]), .out (gt_6_31_n_41));
  inv1$ gt_6_31_g6598(.in (in1[26]), .out (gt_6_31_n_40));
  inv1$ gt_6_31_g6599(.in (in1[17]), .out (gt_6_31_n_39));
  inv1$ gt_6_31_g6600(.in (in2[7]), .out (gt_6_31_n_38));
  inv1$ gt_6_31_g6601(.in (in2[9]), .out (gt_6_31_n_37));
  inv1$ gt_6_31_g6602(.in (in1[8]), .out (gt_6_31_n_36));
  inv1$ gt_6_31_g6603(.in (in2[29]), .out (gt_6_31_n_35));
  inv1$ gt_6_31_g6604(.in (in2[10]), .out (gt_6_31_n_34));
  inv1$ gt_6_31_g6605(.in (in1[1]), .out (gt_6_31_n_33));
  inv1$ gt_6_31_g6606(.in (in2[28]), .out (gt_6_31_n_32));
  inv1$ gt_6_31_g6607(.in (in1[24]), .out (gt_6_31_n_31));
  inv1$ gt_6_31_g6608(.in (in2[5]), .out (gt_6_31_n_30));
  inv1$ gt_6_31_g6609(.in (in2[18]), .out (gt_6_31_n_29));
  inv1$ gt_6_31_g6610(.in (in1[12]), .out (gt_6_31_n_28));
  inv1$ gt_6_31_g6611(.in (in1[23]), .out (gt_6_31_n_27));
  inv1$ gt_6_31_g6612(.in (in2[15]), .out (gt_6_31_n_26));
  inv1$ gt_6_31_g6613(.in (in1[2]), .out (gt_6_31_n_25));
  inv1$ gt_6_31_g6614(.in (in1[20]), .out (gt_6_31_n_24));
  inv1$ gt_6_31_g6615(.in (in1[16]), .out (gt_6_31_n_23));
  inv1$ gt_6_31_g6616(.in (in1[3]), .out (gt_6_31_n_22));
  inv1$ gt_6_31_g6617(.in (in2[3]), .out (gt_6_31_n_21));
  inv1$ gt_6_31_g6618(.in (in1[15]), .out (gt_6_31_n_20));
  inv1$ gt_6_31_g6619(.in (in1[21]), .out (gt_6_31_n_19));
  inv1$ gt_6_31_g6620(.in (in1[6]), .out (gt_6_31_n_18));
  inv1$ gt_6_31_g6621(.in (in2[11]), .out (gt_6_31_n_17));
  inv1$ gt_6_31_g6622(.in (in2[13]), .out (gt_6_31_n_16));
  inv1$ gt_6_31_g6623(.in (in2[30]), .out (gt_6_31_n_15));
  inv1$ gt_6_31_g6624(.in (in2[17]), .out (gt_6_31_n_14));
  inv1$ gt_6_31_g6625(.in (in2[31]), .out (gt_6_31_n_13));
  inv1$ gt_6_31_g6626(.in (in2[22]), .out (gt_6_31_n_12));
  inv1$ gt_6_31_g6627(.in (in1[11]), .out (gt_6_31_n_11));
  inv1$ gt_6_31_g6628(.in (in1[19]), .out (gt_6_31_n_10));
  inv1$ gt_6_31_g6629(.in (in2[21]), .out (gt_6_31_n_9));
  inv1$ gt_6_31_g6630(.in (in1[30]), .out (gt_6_31_n_8));
  inv1$ gt_6_31_g6631(.in (in2[1]), .out (gt_6_31_n_7));
  inv1$ gt_6_31_g6632(.in (in1[10]), .out (gt_6_31_n_6));
  inv1$ gt_6_31_g6633(.in (in1[14]), .out (gt_6_31_n_5));
  inv1$ gt_6_31_g6634(.in (in1[0]), .out (gt_6_31_n_4));
  inv1$ gt_6_31_g6635(.in (in2[8]), .out (gt_6_31_n_3));
  inv1$ gt_6_31_g6636(.in (in1[4]), .out (gt_6_31_n_2));
  inv1$ gt_6_31_g6637(.in (in2[12]), .out (gt_6_31_n_1));
  inv1$ gt_6_31_g6638(.in (in1[27]), .out (gt_6_31_n_0));
endmodule

module mux_nbit_2x1_N32(a0, a1, sel, out);
  input [31:0] a0, a1;
  input sel;
  output [31:0] out;
  wire [31:0] a0, a1;
  wire sel;
  wire [31:0] out;
  mux2$ \loop.mux_gen[0].u_mux_2x1 (.s0 (sel), .in0 (a0[0]), .in1
       (a1[0]), .outb (out[0]));
  mux2$ \loop.mux_gen[1].u_mux_2x1 (.s0 (sel), .in0 (a0[1]), .in1
       (a1[1]), .outb (out[1]));
  mux2$ \loop.mux_gen[2].u_mux_2x1 (.s0 (sel), .in0 (a0[2]), .in1
       (a1[2]), .outb (out[2]));
  mux2$ \loop.mux_gen[3].u_mux_2x1 (.s0 (sel), .in0 (a0[3]), .in1
       (a1[3]), .outb (out[3]));
  mux2$ \loop.mux_gen[4].u_mux_2x1 (.s0 (sel), .in0 (a0[4]), .in1
       (a1[4]), .outb (out[4]));
  mux2$ \loop.mux_gen[5].u_mux_2x1 (.s0 (sel), .in0 (a0[5]), .in1
       (a1[5]), .outb (out[5]));
  mux2$ \loop.mux_gen[6].u_mux_2x1 (.s0 (sel), .in0 (a0[6]), .in1
       (a1[6]), .outb (out[6]));
  mux2$ \loop.mux_gen[7].u_mux_2x1 (.s0 (sel), .in0 (a0[7]), .in1
       (a1[7]), .outb (out[7]));
  mux2$ \loop.mux_gen[8].u_mux_2x1 (.s0 (sel), .in0 (a0[8]), .in1
       (a1[8]), .outb (out[8]));
  mux2$ \loop.mux_gen[9].u_mux_2x1 (.s0 (sel), .in0 (a0[9]), .in1
       (a1[9]), .outb (out[9]));
  mux2$ \loop.mux_gen[10].u_mux_2x1 (.s0 (sel), .in0 (a0[10]), .in1
       (a1[10]), .outb (out[10]));
  mux2$ \loop.mux_gen[11].u_mux_2x1 (.s0 (sel), .in0 (a0[11]), .in1
       (a1[11]), .outb (out[11]));
  mux2$ \loop.mux_gen[12].u_mux_2x1 (.s0 (sel), .in0 (a0[12]), .in1
       (a1[12]), .outb (out[12]));
  mux2$ \loop.mux_gen[13].u_mux_2x1 (.s0 (sel), .in0 (a0[13]), .in1
       (a1[13]), .outb (out[13]));
  mux2$ \loop.mux_gen[14].u_mux_2x1 (.s0 (sel), .in0 (a0[14]), .in1
       (a1[14]), .outb (out[14]));
  mux2$ \loop.mux_gen[15].u_mux_2x1 (.s0 (sel), .in0 (a0[15]), .in1
       (a1[15]), .outb (out[15]));
  mux2$ \loop.mux_gen[16].u_mux_2x1 (.s0 (sel), .in0 (a0[16]), .in1
       (a1[16]), .outb (out[16]));
  mux2$ \loop.mux_gen[17].u_mux_2x1 (.s0 (sel), .in0 (a0[17]), .in1
       (a1[17]), .outb (out[17]));
  mux2$ \loop.mux_gen[18].u_mux_2x1 (.s0 (sel), .in0 (a0[18]), .in1
       (a1[18]), .outb (out[18]));
  mux2$ \loop.mux_gen[19].u_mux_2x1 (.s0 (sel), .in0 (a0[19]), .in1
       (a1[19]), .outb (out[19]));
  mux2$ \loop.mux_gen[20].u_mux_2x1 (.s0 (sel), .in0 (a0[20]), .in1
       (a1[20]), .outb (out[20]));
  mux2$ \loop.mux_gen[21].u_mux_2x1 (.s0 (sel), .in0 (a0[21]), .in1
       (a1[21]), .outb (out[21]));
  mux2$ \loop.mux_gen[22].u_mux_2x1 (.s0 (sel), .in0 (a0[22]), .in1
       (a1[22]), .outb (out[22]));
  mux2$ \loop.mux_gen[23].u_mux_2x1 (.s0 (sel), .in0 (a0[23]), .in1
       (a1[23]), .outb (out[23]));
  mux2$ \loop.mux_gen[24].u_mux_2x1 (.s0 (sel), .in0 (a0[24]), .in1
       (a1[24]), .outb (out[24]));
  mux2$ \loop.mux_gen[25].u_mux_2x1 (.s0 (sel), .in0 (a0[25]), .in1
       (a1[25]), .outb (out[25]));
  mux2$ \loop.mux_gen[26].u_mux_2x1 (.s0 (sel), .in0 (a0[26]), .in1
       (a1[26]), .outb (out[26]));
  mux2$ \loop.mux_gen[27].u_mux_2x1 (.s0 (sel), .in0 (a0[27]), .in1
       (a1[27]), .outb (out[27]));
  mux2$ \loop.mux_gen[28].u_mux_2x1 (.s0 (sel), .in0 (a0[28]), .in1
       (a1[28]), .outb (out[28]));
  mux2$ \loop.mux_gen[29].u_mux_2x1 (.s0 (sel), .in0 (a0[29]), .in1
       (a1[29]), .outb (out[29]));
  mux2$ \loop.mux_gen[30].u_mux_2x1 (.s0 (sel), .in0 (a0[30]), .in1
       (a1[30]), .outb (out[30]));
  mux2$ \loop.mux_gen[31].u_mux_2x1 (.s0 (sel), .in0 (a0[31]), .in1
       (a1[31]), .outb (out[31]));
endmodule

module cond_sum8(A, B, CIN, S, COUT);
  input [7:0] A, B;
  input CIN;
  output [7:0] S;
  output COUT;
  wire [7:0] A, B;
  wire CIN;
  wire [7:0] S;
  wire COUT;
  wire c4;
  nibble_low u_nibble_low(.a (A[3:0]), .b (B[3:0]), .cin (CIN), .s
       (S[3:0]), .cout (c4));
  nibble_high u_nibble_high(.a (A[7:4]), .b (B[7:4]), .cin (c4), .s
       (S[7:4]), .cout (COUT));
endmodule

module cond_sum16(A, B, CIN, S, COUT);
  input [15:0] A, B;
  input CIN;
  output [15:0] S;
  output COUT;
  wire [15:0] A, B;
  wire CIN;
  wire [15:0] S;
  wire COUT;
  wire [15:0] S_temp;
  wire COUT0, COUT1, c8, n_36, n_37, n_38, n_39, n_40;
  wire n_41, n_42, n_43;
  cond_sum8 u_cond_sum8_low(.A (A[7:0]), .B (B[7:0]), .CIN (CIN), .S
       (S[7:0]), .COUT (c8));
  cond_sum8 u_cond_sum8_high0(.A (A[15:8]), .B (B[15:8]), .CIN (1'b0),
       .S ({n_36, n_37, n_38, n_39, n_40, n_41, n_42, n_43}), .COUT
       (COUT0));
  cond_sum8 u_cond_sum8_high1(.A (A[15:8]), .B (B[15:8]), .CIN (1'b1),
       .S (S_temp[15:8]), .COUT (COUT1));
  mux2$ \u_mux1[15] (.s0 (c8), .in0 (n_36), .in1 (S_temp[15]), .outb
       (S[15]));
  mux2$ \u_mux1[14] (.s0 (c8), .in0 (n_37), .in1 (S_temp[14]), .outb
       (S[14]));
  mux2$ \u_mux1[13] (.s0 (c8), .in0 (n_38), .in1 (S_temp[13]), .outb
       (S[13]));
  mux2$ \u_mux1[12] (.s0 (c8), .in0 (n_39), .in1 (S_temp[12]), .outb
       (S[12]));
  mux2$ \u_mux1[11] (.s0 (c8), .in0 (n_40), .in1 (S_temp[11]), .outb
       (S[11]));
  mux2$ \u_mux1[10] (.s0 (c8), .in0 (n_41), .in1 (S_temp[10]), .outb
       (S[10]));
  mux2$ \u_mux1[9] (.s0 (c8), .in0 (n_42), .in1 (S_temp[9]), .outb
       (S[9]));
  mux2$ \u_mux1[8] (.s0 (c8), .in0 (n_43), .in1 (S_temp[8]), .outb
       (S[8]));
  mux2$ u_mux2(.s0 (c8), .in0 (COUT0), .in1 (COUT1), .outb (COUT));
endmodule

module cond_sum32(A, B, CIN, S, COUT);
  input [31:0] A, B;
  input CIN;
  output [31:0] S;
  output COUT;
  wire [31:0] A, B;
  wire CIN;
  wire [31:0] S;
  wire COUT;
  wire [31:0] S_temp;
  wire COUT0, COUT1, c16, n_68, n_69, n_70, n_71, n_72;
  wire n_73, n_74, n_75, n_76, n_77, n_78, n_79, n_80;
  wire n_81, n_82, n_83;
  cond_sum16 u_cond_sum16_low(.A (A[15:0]), .B (B[15:0]), .CIN (CIN),
       .S (S[15:0]), .COUT (c16));
  cond_sum16 u_cond_sum16_high0(.A (A[31:16]), .B (B[31:16]), .CIN
       (1'b0), .S ({n_68, n_69, n_70, n_71, n_72, n_73, n_74, n_75,
       n_76, n_77, n_78, n_79, n_80, n_81, n_82, n_83}), .COUT (COUT0));
  cond_sum16 u_cond_sum16_high1(.A (A[31:16]), .B (B[31:16]), .CIN
       (1'b1), .S (S_temp[31:16]), .COUT (COUT1));
  mux2$ \u_mux1[15] (.s0 (c16), .in0 (n_68), .in1 (S_temp[31]), .outb
       (S[31]));
  mux2$ \u_mux1[14] (.s0 (c16), .in0 (n_69), .in1 (S_temp[30]), .outb
       (S[30]));
  mux2$ \u_mux1[13] (.s0 (c16), .in0 (n_70), .in1 (S_temp[29]), .outb
       (S[29]));
  mux2$ \u_mux1[12] (.s0 (c16), .in0 (n_71), .in1 (S_temp[28]), .outb
       (S[28]));
  mux2$ \u_mux1[11] (.s0 (c16), .in0 (n_72), .in1 (S_temp[27]), .outb
       (S[27]));
  mux2$ \u_mux1[10] (.s0 (c16), .in0 (n_73), .in1 (S_temp[26]), .outb
       (S[26]));
  mux2$ \u_mux1[9] (.s0 (c16), .in0 (n_74), .in1 (S_temp[25]), .outb
       (S[25]));
  mux2$ \u_mux1[8] (.s0 (c16), .in0 (n_75), .in1 (S_temp[24]), .outb
       (S[24]));
  mux2$ \u_mux1[7] (.s0 (c16), .in0 (n_76), .in1 (S_temp[23]), .outb
       (S[23]));
  mux2$ \u_mux1[6] (.s0 (c16), .in0 (n_77), .in1 (S_temp[22]), .outb
       (S[22]));
  mux2$ \u_mux1[5] (.s0 (c16), .in0 (n_78), .in1 (S_temp[21]), .outb
       (S[21]));
  mux2$ \u_mux1[4] (.s0 (c16), .in0 (n_79), .in1 (S_temp[20]), .outb
       (S[20]));
  mux2$ \u_mux1[3] (.s0 (c16), .in0 (n_80), .in1 (S_temp[19]), .outb
       (S[19]));
  mux2$ \u_mux1[2] (.s0 (c16), .in0 (n_81), .in1 (S_temp[18]), .outb
       (S[18]));
  mux2$ \u_mux1[1] (.s0 (c16), .in0 (n_82), .in1 (S_temp[17]), .outb
       (S[17]));
  mux2$ \u_mux1[0] (.s0 (c16), .in0 (n_83), .in1 (S_temp[16]), .outb
       (S[16]));
  mux2$ u_mux2(.s0 (c16), .in0 (COUT0), .in1 (COUT1), .outb (COUT));
endmodule

module compare4(in0, in1, out);
  input [3:0] in0, in1;
  output out;
  wire [3:0] in0, in1;
  wire out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9, n_10, n_11;
  nand3$ g838(.in0 (n_9), .in1 (n_11), .in2 (n_4), .out (out));
  nand4$ g839(.in0 (n_6), .in1 (n_2), .in2 (n_10), .in3 (n_8), .out
       (n_11));
  nand3$ g840(.in0 (n_0), .in1 (n_7), .in2 (in0[0]), .out (n_10));
  nand3$ g841(.in0 (n_1), .in1 (n_8), .in2 (in1[2]), .out (n_9));
  or2$ g846(.in0 (n_3), .in1 (in1[3]), .out (n_8));
  nand2$ g842(.in0 (n_5), .in1 (in1[1]), .out (n_7));
  or2$ g843(.in0 (n_5), .in1 (in1[1]), .out (n_6));
  nand2$ g844(.in0 (n_3), .in1 (in1[3]), .out (n_4));
  or2$ g845(.in0 (n_1), .in1 (in1[2]), .out (n_2));
  inv1$ g850(.in (in0[1]), .out (n_5));
  inv1$ g847(.in (in1[0]), .out (n_0));
  inv1$ g849(.in (in0[3]), .out (n_3));
  inv1$ g848(.in (in0[2]), .out (n_1));
endmodule

module compare8(in0, in1, out);
  input [7:0] in0, in1;
  output out;
  wire [7:0] in0, in1;
  wire out;
  wire n_0, n_1, n_2, n_3, n_4, n_5, n_6, n_7;
  wire n_8, n_9, n_10, n_11, n_12, n_13, n_14, n_15;
  wire n_16, n_17, n_18, n_19, n_20, n_21, n_22, n_25;
  wire n_26, n_27, n_28, n_30, n_31, n_32, n_33, n_34;
  wire n_36, n_54, n_55;
  nand3$ g2687(.in0 (n_34), .in1 (n_36), .in2 (n_30), .out (out));
  nand3$ g2688(.in0 (n_33), .in1 (n_55), .in2 (n_26), .out (n_36));
  nand2$ g2690(.in0 (n_31), .in1 (n_33), .out (n_34));
  nand3$ g2694(.in0 (n_16), .in1 (n_27), .in2 (n_18), .out (n_32));
  nand2$ g2693(.in0 (n_28), .in1 (n_9), .out (n_31));
  nand2$ g2692(.in0 (n_20), .in1 (n_21), .out (n_30));
  nand3$ g2700(.in0 (n_10), .in1 (n_25), .in2 (in1[4]), .out (n_28));
  nand3$ g2701(.in0 (n_1), .in1 (n_17), .in2 (in0[0]), .out (n_27));
  and3$ g2695(.in0 (n_25), .in1 (n_15), .in2 (n_11), .out (n_26));
  and2$ g2698(.in0 (n_21), .in1 (n_13), .out (n_33));
  nand2$ g2699(.in0 (n_8), .in1 (n_19), .out (n_20));
  nand2$ g2705(.in0 (n_12), .in1 (in1[6]), .out (n_19));
  nand2$ g2706(.in0 (n_6), .in1 (in0[7]), .out (n_21));
  nand2$ g2707(.in0 (n_3), .in1 (in0[5]), .out (n_25));
  nand2$ g2708(.in0 (n_0), .in1 (in0[1]), .out (n_18));
  nand2$ g2709(.in0 (n_4), .in1 (in1[1]), .out (n_17));
  or2$ g2710(.in0 (n_7), .in1 (in1[2]), .out (n_16));
  nand2$ g2711(.in0 (n_14), .in1 (in0[3]), .out (n_15));
  or2$ g2712(.in0 (n_12), .in1 (in1[6]), .out (n_13));
  or2$ g2713(.in0 (n_10), .in1 (in1[4]), .out (n_11));
  nand2$ g2702(.in0 (n_5), .in1 (in1[5]), .out (n_9));
  nand2$ g2703(.in0 (n_2), .in1 (in1[7]), .out (n_8));
  nand2$ g2704(.in0 (n_7), .in1 (in1[2]), .out (n_22));
  inv1$ g2720(.in (in0[6]), .out (n_12));
  inv1$ g2715(.in (in0[4]), .out (n_10));
  inv1$ g2722(.in (in1[3]), .out (n_14));
  inv1$ g2724(.in (in1[7]), .out (n_6));
  inv1$ g2714(.in (in0[5]), .out (n_5));
  inv1$ g2716(.in (in0[1]), .out (n_4));
  inv1$ g2719(.in (in1[5]), .out (n_3));
  inv1$ g2718(.in (in0[7]), .out (n_2));
  inv1$ g2723(.in (in0[2]), .out (n_7));
  inv1$ g2721(.in (in1[0]), .out (n_1));
  inv1$ g2717(.in (in1[1]), .out (n_0));
  nand3$ g2(.in0 (n_54), .in1 (n_22), .in2 (n_32), .out (n_55));
  or2$ g3(.in0 (in0[3]), .in1 (n_14), .out (n_54));
endmodule

module ld_override(ld_override, alu1_op, ld_flags_in, ld_flags_out);
  input ld_override;
  input [3:0] alu1_op;
  input [5:0] ld_flags_in;
  output [5:0] ld_flags_out;
  wire ld_override;
  wire [3:0] alu1_op;
  wire [5:0] ld_flags_in;
  wire [5:0] ld_flags_out;
  wire n_0, n_1, n_2, n_3, n_5, n_6, n_25, n_26;
  nor2$ g453(.in0 (n_26), .in1 (n_6), .out (ld_flags_out[5]));
  nor2$ g454(.in0 (n_26), .in1 (n_0), .out (ld_flags_out[4]));
  nor2$ g457(.in0 (n_26), .in1 (n_2), .out (ld_flags_out[3]));
  nor2$ g458(.in0 (n_26), .in1 (n_5), .out (ld_flags_out[2]));
  nor2$ g455(.in0 (n_26), .in1 (n_1), .out (ld_flags_out[1]));
  nor2$ g456(.in0 (n_26), .in1 (n_3), .out (ld_flags_out[0]));
  inv1$ g462(.in (ld_flags_in[5]), .out (n_6));
  inv1$ g463(.in (ld_flags_in[2]), .out (n_5));
  inv1$ g465(.in (ld_flags_in[0]), .out (n_3));
  inv1$ g466(.in (ld_flags_in[3]), .out (n_2));
  inv1$ g467(.in (ld_flags_in[1]), .out (n_1));
  inv1$ g460(.in (ld_flags_in[4]), .out (n_0));
  nor3$ g5(.in0 (n_25), .in1 (alu1_op[2]), .in2 (alu1_op[3]), .out
       (n_26));
  nand2$ g6(.in0 (alu1_op[1]), .in1 (ld_override), .out (n_25));
endmodule

module alu1(sr1, sr2, mem_out, mem_out_latched, eax, alu1_op,
     alu1_op_size, mem_rd_size, CF_in, AF_in, DF_in, alu_res1,
     alu1_flags, df_val_ex, df_val, ISR, cmps_flags, ld_flag_CF_in,
     ld_flag_PF_in, ld_flag_AF_in, ld_flag_ZF_in, ld_flag_SF_in,
     ld_flag_OF_in, ld_flag_CF, ld_flag_PF, ld_flag_AF, ld_flag_ZF,
     ld_flag_SF, ld_flag_OF);
  input [31:0] sr1, sr2, mem_out, mem_out_latched, eax;
  input [3:0] alu1_op;
  input [1:0] alu1_op_size, mem_rd_size;
  input CF_in, AF_in, DF_in, df_val, ISR, ld_flag_CF_in, ld_flag_PF_in,
       ld_flag_AF_in, ld_flag_ZF_in, ld_flag_SF_in, ld_flag_OF_in;
  output [31:0] alu_res1;
  output [5:0] alu1_flags, cmps_flags;
  output df_val_ex, ld_flag_CF, ld_flag_PF, ld_flag_AF, ld_flag_ZF,
       ld_flag_SF, ld_flag_OF;
  wire [31:0] sr1, sr2, mem_out, mem_out_latched, eax;
  wire [3:0] alu1_op;
  wire [1:0] alu1_op_size, mem_rd_size;
  wire CF_in, AF_in, DF_in, df_val, ISR, ld_flag_CF_in, ld_flag_PF_in,
       ld_flag_AF_in, ld_flag_ZF_in, ld_flag_SF_in, ld_flag_OF_in;
  wire [31:0] alu_res1;
  wire [5:0] alu1_flags, cmps_flags;
  wire df_val_ex, ld_flag_CF, ld_flag_PF, ld_flag_AF, ld_flag_ZF,
       ld_flag_SF, ld_flag_OF;
  wire [31:0] w_or_res;
  wire [5:0] w_or_flags;
  wire [31:0] w_and_res;
  wire [5:0] w_and_flags;
  wire [31:0] w_sal_res;
  wire [32:0] w_sal_res_cf;
  wire [5:0] w_sal_flags;
  wire [31:0] w_sar_res32;
  wire [32:0] w_sar_res_cf;
  wire [31:0] w_sar_res16;
  wire [31:0] w_sar_res8;
  wire [31:0] w_sar_res;
  wire [5:0] w_sar_flags;
  wire [31:0] w_mux0_res;
  wire [5:0] w_mux0_flags;
  wire [31:0] w_not_res;
  wire [31:0] w_mux1_res;
  wire [31:0] w_inc_res;
  wire [5:0] w_inc_flags;
  wire [31:0] w_add_res;
  wire [5:0] w_add_flags;
  wire [31:0] sr1_bar;
  wire [31:0] w_comp_res;
  wire [5:0] w_comp_flags;
  wire [31:0] res_df_0;
  wire [31:0] res_df_1;
  wire [31:0] w_sr1_ch;
  wire [31:0] w_sr1_ch_res;
  wire [31:0] w_mux2_res;
  wire [5:0] w_mux2_flags;
  wire [7:0] w_al_6;
  wire [7:0] w_al_60;
  wire [7:0] w_al_66;
  wire [31:0] w_daa_res;
  wire [5:0] w_daa_flags;
  wire [31:0] mem_out_bar;
  wire [31:0] w_cmps_res;
  wire AF_bar, CF_bar, UNCONNECTED5, UNCONNECTED6, UNCONNECTED7,
       UNCONNECTED8, UNCONNECTED9, UNCONNECTED10;
  wire UNCONNECTED11, UNCONNECTED12, UNCONNECTED13, UNCONNECTED14,
       UNCONNECTED15, UNCONNECTED16, UNCONNECTED17, UNCONNECTED18;
  wire UNCONNECTED19, UNCONNECTED20, UNCONNECTED21, UNCONNECTED22,
       UNCONNECTED23, UNCONNECTED24, UNCONNECTED25, UNCONNECTED26;
  wire UNCONNECTED27, UNCONNECTED28, UNCONNECTED29, UNCONNECTED30,
       UNCONNECTED31, UNCONNECTED32, UNCONNECTED33, UNCONNECTED34;
  wire UNCONNECTED35, UNCONNECTED36, UNCONNECTED37, UNCONNECTED38,
       UNCONNECTED39, UNCONNECTED40, UNCONNECTED41, UNCONNECTED42;
  wire UNCONNECTED43, UNCONNECTED44, UNCONNECTED45, UNCONNECTED46,
       UNCONNECTED47, UNCONNECTED48, UNCONNECTED49, UNCONNECTED50;
  wire UNCONNECTED51, UNCONNECTED52, UNCONNECTED53, UNCONNECTED54,
       UNCONNECTED55, UNCONNECTED56, UNCONNECTED57, UNCONNECTED58;
  wire UNCONNECTED59, UNCONNECTED60, UNCONNECTED61, UNCONNECTED62,
       UNCONNECTED63, UNCONNECTED64, UNCONNECTED65, UNCONNECTED66;
  wire UNCONNECTED67, UNCONNECTED68, UNCONNECTED69, UNCONNECTED70,
       UNCONNECTED71, UNCONNECTED72, UNCONNECTED73, UNCONNECTED74;
  wire UNCONNECTED75, UNCONNECTED76, UNCONNECTED77, UNCONNECTED78,
       UNCONNECTED79, UNCONNECTED80, UNCONNECTED81, UNCONNECTED82;
  wire UNCONNECTED83, UNCONNECTED84, c4_add, c4_cmps, c4_comp, c4_inc,
       c8_add, c8_cmps;
  wire c8_comp, c8_inc, c16_add, c16_cmps, c16_comp, c16_inc, c32_add,
       c32_cmps;
  wire c32_comp, c32_inc, daa_flag0_pf, daa_flag0_zf, daa_flag6_pf,
       daa_flag6_zf, daa_flag60_pf, daa_flag60_zf;
  wire daa_flag66_pf, daa_flag66_zf, ld_override, ld_override32, s0,
       s1, sign0, sign1;
  or32 u_or(.out (w_or_res), .in0 (sr1), .in1 (sr2));
  or_flags u_or_flgs(.in (w_or_res), .alu1_op_size (alu1_op_size),
       .flags (w_or_flags));
  and32 u_and(.out (w_and_res), .in0 (sr1), .in1 (sr2));
  and_flags u_and_flgs(.in (w_and_res), .alu1_op_size (alu1_op_size),
       .flags (w_and_flags));
  bit_shift_left_flgs u_left(.amt (sr2[4:0]), .sin (1'b0), .in (sr1),
       .out (w_sal_res), .out_cf (w_sal_res_cf), .sr2_count_0
       (ld_override));
  sal_flags u_sal_flgs(.in (w_sal_res_cf), .alu1_op_size
       (alu1_op_size), .flags (w_sal_flags));
  bit_shift_right_flgs u_right32(.amt (sr2[4:0]), .sin (1'b0), .in
       (sr1), .out (w_sar_res32), .out_cf (w_sar_res_cf), .sr2_count_0
       (ld_override32));
  bit_shift_right_flgs u_right16(.amt (sr2[4:0]), .sin (1'b0), .in
       ({16'b0000000000000000, sr1[15:0]}), .out (w_sar_res16), .out_cf
       ({UNCONNECTED37, UNCONNECTED36, UNCONNECTED35, UNCONNECTED34,
       UNCONNECTED33, UNCONNECTED32, UNCONNECTED31, UNCONNECTED30,
       UNCONNECTED29, UNCONNECTED28, UNCONNECTED27, UNCONNECTED26,
       UNCONNECTED25, UNCONNECTED24, UNCONNECTED23, UNCONNECTED22,
       UNCONNECTED21, UNCONNECTED20, UNCONNECTED19, UNCONNECTED18,
       UNCONNECTED17, UNCONNECTED16, UNCONNECTED15, UNCONNECTED14,
       UNCONNECTED13, UNCONNECTED12, UNCONNECTED11, UNCONNECTED10,
       UNCONNECTED9, UNCONNECTED8, UNCONNECTED7, UNCONNECTED6,
       UNCONNECTED5}), .sr2_count_0 (UNCONNECTED38));
  bit_shift_right_flgs u_right8(.amt (sr2[4:0]), .sin (1'b0), .in
       ({24'b000000000000000000000000, sr1[7:0]}), .out (w_sar_res8),
       .out_cf ({UNCONNECTED71, UNCONNECTED70, UNCONNECTED69,
       UNCONNECTED68, UNCONNECTED67, UNCONNECTED66, UNCONNECTED65,
       UNCONNECTED64, UNCONNECTED63, UNCONNECTED62, UNCONNECTED61,
       UNCONNECTED60, UNCONNECTED59, UNCONNECTED58, UNCONNECTED57,
       UNCONNECTED56, UNCONNECTED55, UNCONNECTED54, UNCONNECTED53,
       UNCONNECTED52, UNCONNECTED51, UNCONNECTED50, UNCONNECTED49,
       UNCONNECTED48, UNCONNECTED47, UNCONNECTED46, UNCONNECTED45,
       UNCONNECTED44, UNCONNECTED43, UNCONNECTED42, UNCONNECTED41,
       UNCONNECTED40, UNCONNECTED39}), .sr2_count_0 (UNCONNECTED72));
  mux_nbit_4x1_N32 mux_sar_res(.a0 (w_sar_res8), .a1 (w_sar_res16), .a2
       (w_sar_res32), .a3 (32'b00000000000000000000000000000000), .sel
       (alu1_op_size), .out (w_sar_res));
  sar_flags u_sar_flgs(.in (w_sar_res_cf), .alu1_op_size
       (alu1_op_size), .flags (w_sar_flags));
  mux_nbit_4x1_N32 mux0_res(.a0 (w_or_res), .a1 (w_and_res), .a2
       (w_sal_res), .a3 (w_sar_res), .sel (alu1_op[1:0]), .out
       (w_mux0_res));
  mux_nbit_4x1_N6 mux0_flags(.a0 (w_or_flags), .a1 (w_and_flags), .a2
       (w_sal_flags), .a3 (w_sar_flags), .sel (alu1_op[1:0]), .out
       (w_mux0_flags));
  not32 u_not(.out (w_not_res), .in (sr1));
  mux_nbit_4x1_N32 mux1_res(.a0 (sr1), .a1 (sr2), .a2
       (32'b00000000000000000000000000000000), .a3 (w_not_res), .sel
       (alu1_op[1:0]), .out (w_mux1_res));
  cond_sum32_c u_inc(.A (sr1), .B
       (32'b00000000000000000000000000000001), .CIN (1'b0), .S
       (w_inc_res), .COUT (c32_inc), .c4 (c4_inc), .c8 (c8_inc), .c16
       (c16_inc));
  add_flags u_inc_flags(.A (sr1), .B
       (32'b00000000000000000000000000000001), .s (w_inc_res), .c32
       (c32_inc), .c16 (c16_inc), .c8 (c8_inc), .c4 (c4_inc), .flags
       (w_inc_flags), .alu1_op_size (alu1_op_size));
  cond_sum32_c u_add(.A (sr1), .B (sr2), .CIN (1'b0), .S (w_add_res),
       .COUT (c32_add), .c4 (c4_add), .c8 (c8_add), .c16 (c16_add));
  add_flags u_add_flags(.A (sr1), .B (sr2), .s (w_add_res), .c32
       (c32_add), .c16 (c16_add), .c8 (c8_add), .c4 (c4_add), .flags
       (w_add_flags), .alu1_op_size (alu1_op_size));
  not32 u_sr1_inv(.out (sr1_bar), .in (sr1));
  greater_than_for_af u_comp_pass(.in1 (sr1[3:0]), .in2 (eax[3:0]),
       .gt_out (c4_comp));
  greater_than_for_flags8 u_comp_cf8(.in1 (sr1[7:0]), .in2 (eax[7:0]),
       .gt_out (c8_comp));
  greater_than_for_flags16 u_comp_cf16(.in1 (sr1[15:0]), .in2
       (eax[15:0]), .gt_out (c16_comp));
  greater_than_for_flags32 u_comp_cf32(.in1 (sr1), .in2 (eax), .gt_out
       (c32_comp));
  cond_sum32_c u_comp(.A (eax), .B (sr1_bar), .CIN (1'b1), .S
       (w_comp_res), .COUT (UNCONNECTED73), .c4 (UNCONNECTED74), .c8
       (UNCONNECTED75), .c16 (UNCONNECTED76));
  add_flags u_comp_flags(.A (eax), .B (sr1_bar), .s (w_comp_res), .c32
       (c32_comp), .c16 (c16_comp), .c8 (c8_comp), .c4 (c4_comp),
       .flags (w_comp_flags), .alu1_op_size (alu1_op_size));
  mux_nbit_4x1_N32 mux_size_inc(.a0
       (32'b00000000000000000000000000000001), .a1
       (32'b00000000000000000000000000000010), .a2
       (32'b00000000000000000000000000000100), .a3
       (32'b00000000000000000000000000001000), .sel (mem_rd_size), .out
       (res_df_0));
  mux_nbit_4x1_N32 mux_size_dec(.a0
       (32'b11111111111111111111111111111111), .a1
       (32'b11111111111111111111111111111110), .a2
       (32'b11111111111111111111111111111100), .a3
       (32'b11111111111111111111111111111000), .sel (mem_rd_size), .out
       (res_df_1));
  mux_nbit_2x1_N32 mux_df(.a0 (res_df_0), .a1 (res_df_1), .sel (DF_in),
       .out (w_sr1_ch));
  cond_sum32 u_sr2_ch(.A (sr1), .B (w_sr1_ch), .CIN (1'b0), .S
       (w_sr1_ch_res), .COUT (UNCONNECTED77));
  mux_nbit_4x1_N32 mux2_res(.a0 (w_inc_res), .a1 (w_add_res), .a2
       (w_sr1_ch_res), .a3 (sr1), .sel (alu1_op[1:0]), .out
       (w_mux2_res));
  mux_nbit_4x1_N6 mux2_flags(.a0 (w_inc_flags), .a1 (w_add_flags), .a2
       (6'b000000), .a3 (w_comp_flags), .sel (alu1_op[1:0]), .out
       (w_mux2_flags));
  compare4 u_comp0(.in0 (eax[3:0]), .in1 (4'b1001), .out (sign0));
  compare8 u_comp1(.in0 (eax[7:0]), .in1 (8'b10011001), .out (sign1));
  cond_sum8 u_al6(.A (eax[7:0]), .B (8'b00000110), .CIN (1'b0), .S
       (w_al_6), .COUT (UNCONNECTED78));
  cond_sum8 u_al60(.A (eax[7:0]), .B (8'b01100000), .CIN (1'b0), .S
       (w_al_60), .COUT (UNCONNECTED79));
  cond_sum8 u_al66(.A (eax[7:0]), .B (8'b01100110), .CIN (1'b0), .S
       (w_al_66), .COUT (UNCONNECTED80));
  mux_nbit_4x1_N32 daa_res(.a0 (eax), .a1 ({eax[31:8], w_al_6}), .a2
       ({eax[31:8], w_al_60}), .a3 ({eax[31:8], w_al_66}), .sel ({s1,
       s0}), .out (w_daa_res));
  zero8 u_z6(.in (w_al_6), .out (daa_flag6_zf));
  zero8 u_z60(.in (w_al_60), .out (daa_flag60_zf));
  zero8 u_z66(.in (w_al_66), .out (daa_flag66_zf));
  zero8 u_z0(.in (eax[7:0]), .out (daa_flag0_zf));
  parity u_par6(.in (w_al_6), .out (daa_flag6_pf));
  parity u_par60(.in (w_al_60), .out (daa_flag60_pf));
  parity u_par66(.in (w_al_66), .out (daa_flag66_pf));
  parity u_par0(.in (eax[7:0]), .out (daa_flag0_pf));
  mux_nbit_4x1_N32 mux_res(.a0 (w_mux0_res), .a1 (w_mux1_res), .a2
       (w_mux2_res), .a3 (w_daa_res), .sel (alu1_op[3:2]), .out
       (alu_res1));
  mux_nbit_4x1_N6 mux_flags(.a0 (w_mux0_flags), .a1 ({sr1[11],
       sr1[7:6], sr1[4], sr1[2], sr1[0]}), .a2 (w_mux2_flags), .a3
       ({1'b0, w_daa_flags[4:0]}), .sel (alu1_op[3:2]), .out
       (alu1_flags));
  not32 u_mem_inv(.out (mem_out_bar), .in (mem_out));
  greater_than_for_af u_cmps(.in1 (mem_out[3:0]), .in2
       (mem_out_latched[3:0]), .gt_out (c4_cmps));
  greater_than_for_flags8 u_cmps_cf8(.in1 (mem_out[7:0]), .in2
       (mem_out_latched[7:0]), .gt_out (c8_cmps));
  greater_than_for_flags16 u_cmps_cf16(.in1 (mem_out[15:0]), .in2
       (mem_out_latched[15:0]), .gt_out (c16_cmps));
  greater_than_for_flags32 u_cmps_cf32(.in1 (mem_out), .in2
       (mem_out_latched), .gt_out (c32_cmps));
  cond_sum32_c u_cmps_op(.A (mem_out_latched), .B (mem_out_bar), .CIN
       (1'b1), .S (w_cmps_res), .COUT (UNCONNECTED81), .c4
       (UNCONNECTED82), .c8 (UNCONNECTED83), .c16 (UNCONNECTED84));
  add_flags u_cmps_flags(.A (mem_out_latched), .B (mem_out_bar), .s
       (w_cmps_res), .c32 (c32_cmps), .c16 (c16_cmps), .c8 (c8_cmps),
       .c4 (c4_cmps), .flags (cmps_flags), .alu1_op_size (mem_rd_size));
  ld_override u_ld_over(.ld_override (ld_override), .alu1_op (alu1_op),
       .ld_flags_in ({ld_flag_OF_in, ld_flag_SF_in, ld_flag_ZF_in,
       ld_flag_AF_in, ld_flag_PF_in, ld_flag_CF_in}), .ld_flags_out
       ({ld_flag_OF, ld_flag_SF, ld_flag_ZF, ld_flag_AF, ld_flag_PF,
       ld_flag_CF}));
  inv1$ u_af(.in (AF_in), .out (AF_bar));
  inv1$ u_cf(.in (CF_in), .out (CF_bar));
  nand2$ u_sel0(.in0 (sign0), .in1 (AF_bar), .out (s0));
  nand2$ u_sel1(.in0 (sign1), .in1 (CF_bar), .out (s1));
  mux2$ af_mux(.s0 (s0), .in0 (1'b0), .in1 (1'b1), .outb
       (w_daa_flags[2]));
  mux2$ cf_mux(.s0 (s1), .in0 (1'b0), .in1 (1'b1), .outb
       (w_daa_flags[0]));
  mux4$ mux_zf(.s1 (s1), .s0 (s0), .in0 (daa_flag0_zf), .in1
       (daa_flag6_zf), .in2 (daa_flag60_zf), .in3 (daa_flag66_zf),
       .outb (w_daa_flags[3]));
  mux4$ mux_pf(.s1 (s1), .s0 (s0), .in0 (daa_flag0_pf), .in1
       (daa_flag6_pf), .in2 (daa_flag60_pf), .in3 (daa_flag66_pf),
       .outb (w_daa_flags[1]));
  mux4$ mux_sf(.s1 (s1), .s0 (s0), .in0 (eax[7]), .in1 (w_al_6[7]),
       .in2 (w_al_60[7]), .in3 (w_al_66[7]), .outb (w_daa_flags[4]));
  mux2$ df_mux(.s0 (ISR), .in0 (df_val), .in1 (sr1[10]), .outb
       (df_val_ex));
endmodule

