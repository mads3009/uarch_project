
// Generated by Cadence Encounter(R) RTL Compiler RC14.28 - v14.20-s067_1

// Verification Directory fv/alu3 

module mux_nbit_4x1_N16(a0, a1, a2, a3, sel, out);
  input [15:0] a0, a1, a2, a3;
  input [1:0] sel;
  output [15:0] out;
  wire [15:0] a0, a1, a2, a3;
  wire [1:0] sel;
  wire [15:0] out;
  mux4$ \loop.mux_gen[0].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[0]), .in1 (a1[0]), .in2 (a2[0]), .in3 (a3[0]), .outb
       (out[0]));
  mux4$ \loop.mux_gen[1].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[1]), .in1 (a1[1]), .in2 (a2[1]), .in3 (a3[1]), .outb
       (out[1]));
  mux4$ \loop.mux_gen[2].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[2]), .in1 (a1[2]), .in2 (a2[2]), .in3 (a3[2]), .outb
       (out[2]));
  mux4$ \loop.mux_gen[3].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[3]), .in1 (a1[3]), .in2 (a2[3]), .in3 (a3[3]), .outb
       (out[3]));
  mux4$ \loop.mux_gen[4].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[4]), .in1 (a1[4]), .in2 (a2[4]), .in3 (a3[4]), .outb
       (out[4]));
  mux4$ \loop.mux_gen[5].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[5]), .in1 (a1[5]), .in2 (a2[5]), .in3 (a3[5]), .outb
       (out[5]));
  mux4$ \loop.mux_gen[6].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[6]), .in1 (a1[6]), .in2 (a2[6]), .in3 (a3[6]), .outb
       (out[6]));
  mux4$ \loop.mux_gen[7].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[7]), .in1 (a1[7]), .in2 (a2[7]), .in3 (a3[7]), .outb
       (out[7]));
  mux4$ \loop.mux_gen[8].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[8]), .in1 (a1[8]), .in2 (a2[8]), .in3 (a3[8]), .outb
       (out[8]));
  mux4$ \loop.mux_gen[9].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[9]), .in1 (a1[9]), .in2 (a2[9]), .in3 (a3[9]), .outb
       (out[9]));
  mux4$ \loop.mux_gen[10].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[10]), .in1 (a1[10]), .in2 (a2[10]), .in3 (a3[10]), .outb
       (out[10]));
  mux4$ \loop.mux_gen[11].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[11]), .in1 (a1[11]), .in2 (a2[11]), .in3 (a3[11]), .outb
       (out[11]));
  mux4$ \loop.mux_gen[12].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[12]), .in1 (a1[12]), .in2 (a2[12]), .in3 (a3[12]), .outb
       (out[12]));
  mux4$ \loop.mux_gen[13].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[13]), .in1 (a1[13]), .in2 (a2[13]), .in3 (a3[13]), .outb
       (out[13]));
  mux4$ \loop.mux_gen[14].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[14]), .in1 (a1[14]), .in2 (a2[14]), .in3 (a3[14]), .outb
       (out[14]));
  mux4$ \loop.mux_gen[15].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[15]), .in1 (a1[15]), .in2 (a2[15]), .in3 (a3[15]), .outb
       (out[15]));
endmodule

module fa(a, b, cin, sum, cout);
  input a, b, cin;
  output sum, cout;
  wire a, b, cin;
  wire sum, cout;
  wire w1, w2, w3, w4;
  xor2$ u_xor1(.in0 (a), .in1 (b), .out (w1));
  xor2$ u_xor2(.in0 (w1), .in1 (cin), .out (sum));
  nand2$ u_nand1(.in0 (a), .in1 (b), .out (w2));
  nand2$ u_nand2(.in0 (b), .in1 (cin), .out (w3));
  nand2$ u_nand3(.in0 (cin), .in1 (a), .out (w4));
  nand3$ u_nand4(.in0 (w2), .in1 (w3), .in2 (w4), .out (cout));
endmodule

module mha(a, b, c0, c1, s0, s1);
  input a, b;
  output c0, c1, s0, s1;
  wire a, b;
  wire c0, c1, s0, s1;
  wire temp1;
  or2$ u_or1(.in0 (a), .in1 (b), .out (c1));
  nand2$ u_nand1(.in0 (a), .in1 (b), .out (temp1));
  inv1$ u_inv1(.in (temp1), .out (c0));
  nand2$ u_nand2(.in0 (c1), .in1 (temp1), .out (s1));
  inv1$ u_inv2(.in (s1), .out (s0));
endmodule

module nibble_low(a, b, cin, s, cout);
  input [3:0] a, b;
  input cin;
  output [3:0] s;
  output cout;
  wire [3:0] a, b;
  wire cin;
  wire [3:0] s;
  wire cout;
  wire c1, c2, c4c30, c4c31, c20, c21, c30, c31;
  wire c40, c41, s3c30, s3c31, s10, s11, s20, s21;
  wire s30, s31;
  fa u_fa(.a (a[0]), .b (b[0]), .cin (cin), .sum (s[0]), .cout (c1));
  mha u_mha1(.a (a[1]), .b (b[1]), .c0 (c20), .c1 (c21), .s0 (s10), .s1
       (s11));
  mha u_mha2(.a (a[2]), .b (b[2]), .c0 (c30), .c1 (c31), .s0 (s20), .s1
       (s21));
  mha u_mha3(.a (a[3]), .b (b[3]), .c0 (c40), .c1 (c41), .s0 (s30), .s1
       (s31));
  mux2$ u_mux1(.s0 (c1), .in0 (s10), .in1 (s11), .outb (s[1]));
  mux2$ u_mux2(.s0 (c1), .in0 (c20), .in1 (c21), .outb (c2));
  mux2$ u_mux3(.s0 (c2), .in0 (s20), .in1 (s21), .outb (s[2]));
  mux2$ u_mux4(.s0 (c30), .in0 (s30), .in1 (s31), .outb (s3c30));
  mux2$ u_mux5(.s0 (c31), .in0 (s30), .in1 (s31), .outb (s3c31));
  mux2$ u_mux6(.s0 (c2), .in0 (s3c30), .in1 (s3c31), .outb (s[3]));
  mux2$ u_mux7(.s0 (c30), .in0 (c40), .in1 (c41), .outb (c4c30));
  mux2$ u_mux8(.s0 (c31), .in0 (c40), .in1 (c41), .outb (c4c31));
  mux2$ u_mux9(.s0 (c2), .in0 (c4c30), .in1 (c4c31), .outb (cout));
endmodule

module nibble_high(a, b, cin, s, cout);
  input [7:4] a, b;
  input cin;
  output [7:4] s;
  output cout;
  wire [7:4] a, b;
  wire cin;
  wire [7:4] s;
  wire cout;
  wire c6c50, c6c51, c8c7c6c50, c8c7c6c51, c8c70, c8c71, c50, c51;
  wire c60, c61, c70, c71, c80, c81, s5c50, s5c51;
  wire s6c6c50, s6c6c51, s7c7c6c50, s7c7c6c51, s7c70, s7c71, s40, s41;
  wire s50, s51, s60, s61, s70, s71;
  mha u_mha1(.a (a[4]), .b (b[4]), .c0 (c50), .c1 (c51), .s0 (s40), .s1
       (s41));
  mha u_mha2(.a (a[5]), .b (b[5]), .c0 (c60), .c1 (c61), .s0 (s50), .s1
       (s51));
  mha u_mha3(.a (a[6]), .b (b[6]), .c0 (c70), .c1 (c71), .s0 (s60), .s1
       (s61));
  mha u_mha4(.a (a[7]), .b (b[7]), .c0 (c80), .c1 (c81), .s0 (s70), .s1
       (s71));
  mux2$ u_mux1(.s0 (cin), .in0 (s40), .in1 (s41), .outb (s[4]));
  mux2$ u_mux2(.s0 (c50), .in0 (s50), .in1 (s51), .outb (s5c50));
  mux2$ u_mux3(.s0 (c51), .in0 (s50), .in1 (s51), .outb (s5c51));
  mux2$ u_mux4(.s0 (cin), .in0 (s5c50), .in1 (s5c51), .outb (s[5]));
  mux2$ u_mux5(.s0 (c50), .in0 (c60), .in1 (c61), .outb (c6c50));
  mux2$ u_mux6(.s0 (c51), .in0 (c60), .in1 (c61), .outb (c6c51));
  mux2$ u_mux7(.s0 (c6c50), .in0 (s60), .in1 (s61), .outb (s6c6c50));
  mux2$ u_mux8(.s0 (c6c51), .in0 (s60), .in1 (s61), .outb (s6c6c51));
  mux2$ u_mux9(.s0 (cin), .in0 (s6c6c50), .in1 (s6c6c51), .outb (s[6]));
  mux2$ u_mux10(.s0 (c70), .in0 (s70), .in1 (s71), .outb (s7c70));
  mux2$ u_mux11(.s0 (c71), .in0 (s70), .in1 (s71), .outb (s7c71));
  mux2$ u_mux12(.s0 (c6c50), .in0 (s7c70), .in1 (s7c71), .outb
       (s7c7c6c50));
  mux2$ u_mux13(.s0 (c6c51), .in0 (s7c70), .in1 (s7c71), .outb
       (s7c7c6c51));
  mux2$ u_mux14(.s0 (cin), .in0 (s7c7c6c50), .in1 (s7c7c6c51), .outb
       (s[7]));
  mux2$ u_mux15(.s0 (c70), .in0 (c80), .in1 (c81), .outb (c8c70));
  mux2$ u_mux16(.s0 (c71), .in0 (c80), .in1 (c81), .outb (c8c71));
  mux2$ u_mux17(.s0 (c6c50), .in0 (c8c70), .in1 (c8c71), .outb
       (c8c7c6c50));
  mux2$ u_mux18(.s0 (c6c51), .in0 (c8c70), .in1 (c8c71), .outb
       (c8c7c6c51));
  mux2$ u_mux19(.s0 (cin), .in0 (c8c7c6c50), .in1 (c8c7c6c51), .outb
       (cout));
endmodule

module cond_sum8(A, B, CIN, S, COUT);
  input [7:0] A, B;
  input CIN;
  output [7:0] S;
  output COUT;
  wire [7:0] A, B;
  wire CIN;
  wire [7:0] S;
  wire COUT;
  wire c4;
  nibble_low u_nibble_low(.a (A[3:0]), .b (B[3:0]), .cin (CIN), .s
       (S[3:0]), .cout (c4));
  nibble_high u_nibble_high(.a (A[7:4]), .b (B[7:4]), .cin (c4), .s
       (S[7:4]), .cout (COUT));
endmodule

module cond_sum16(A, B, CIN, S, COUT);
  input [15:0] A, B;
  input CIN;
  output [15:0] S;
  output COUT;
  wire [15:0] A, B;
  wire CIN;
  wire [15:0] S;
  wire COUT;
  wire [15:0] S_temp;
  wire COUT0, COUT1, c8, n_36, n_37, n_38, n_39, n_40;
  wire n_41, n_42, n_43;
  cond_sum8 u_cond_sum8_low(.A (A[7:0]), .B (B[7:0]), .CIN (CIN), .S
       (S[7:0]), .COUT (c8));
  cond_sum8 u_cond_sum8_high0(.A (A[15:8]), .B (B[15:8]), .CIN (1'b0),
       .S ({n_36, n_37, n_38, n_39, n_40, n_41, n_42, n_43}), .COUT
       (COUT0));
  cond_sum8 u_cond_sum8_high1(.A (A[15:8]), .B (B[15:8]), .CIN (1'b1),
       .S (S_temp[15:8]), .COUT (COUT1));
  mux2$ \u_mux1[15] (.s0 (c8), .in0 (n_36), .in1 (S_temp[15]), .outb
       (S[15]));
  mux2$ \u_mux1[14] (.s0 (c8), .in0 (n_37), .in1 (S_temp[14]), .outb
       (S[14]));
  mux2$ \u_mux1[13] (.s0 (c8), .in0 (n_38), .in1 (S_temp[13]), .outb
       (S[13]));
  mux2$ \u_mux1[12] (.s0 (c8), .in0 (n_39), .in1 (S_temp[12]), .outb
       (S[12]));
  mux2$ \u_mux1[11] (.s0 (c8), .in0 (n_40), .in1 (S_temp[11]), .outb
       (S[11]));
  mux2$ \u_mux1[10] (.s0 (c8), .in0 (n_41), .in1 (S_temp[10]), .outb
       (S[10]));
  mux2$ \u_mux1[9] (.s0 (c8), .in0 (n_42), .in1 (S_temp[9]), .outb
       (S[9]));
  mux2$ \u_mux1[8] (.s0 (c8), .in0 (n_43), .in1 (S_temp[8]), .outb
       (S[8]));
  mux2$ u_mux2(.s0 (c8), .in0 (COUT0), .in1 (COUT1), .outb (COUT));
endmodule

module cond_sum32(A, B, CIN, S, COUT);
  input [31:0] A, B;
  input CIN;
  output [31:0] S;
  output COUT;
  wire [31:0] A, B;
  wire CIN;
  wire [31:0] S;
  wire COUT;
  wire [31:0] S_temp;
  wire COUT0, COUT1, c16, n_68, n_69, n_70, n_71, n_72;
  wire n_73, n_74, n_75, n_76, n_77, n_78, n_79, n_80;
  wire n_81, n_82, n_83;
  cond_sum16 u_cond_sum16_low(.A (A[15:0]), .B (B[15:0]), .CIN (CIN),
       .S (S[15:0]), .COUT (c16));
  cond_sum16 u_cond_sum16_high0(.A (A[31:16]), .B (B[31:16]), .CIN
       (1'b0), .S ({n_68, n_69, n_70, n_71, n_72, n_73, n_74, n_75,
       n_76, n_77, n_78, n_79, n_80, n_81, n_82, n_83}), .COUT (COUT0));
  cond_sum16 u_cond_sum16_high1(.A (A[31:16]), .B (B[31:16]), .CIN
       (1'b1), .S (S_temp[31:16]), .COUT (COUT1));
  mux2$ \u_mux1[15] (.s0 (c16), .in0 (n_68), .in1 (S_temp[31]), .outb
       (S[31]));
  mux2$ \u_mux1[14] (.s0 (c16), .in0 (n_69), .in1 (S_temp[30]), .outb
       (S[30]));
  mux2$ \u_mux1[13] (.s0 (c16), .in0 (n_70), .in1 (S_temp[29]), .outb
       (S[29]));
  mux2$ \u_mux1[12] (.s0 (c16), .in0 (n_71), .in1 (S_temp[28]), .outb
       (S[28]));
  mux2$ \u_mux1[11] (.s0 (c16), .in0 (n_72), .in1 (S_temp[27]), .outb
       (S[27]));
  mux2$ \u_mux1[10] (.s0 (c16), .in0 (n_73), .in1 (S_temp[26]), .outb
       (S[26]));
  mux2$ \u_mux1[9] (.s0 (c16), .in0 (n_74), .in1 (S_temp[25]), .outb
       (S[25]));
  mux2$ \u_mux1[8] (.s0 (c16), .in0 (n_75), .in1 (S_temp[24]), .outb
       (S[24]));
  mux2$ \u_mux1[7] (.s0 (c16), .in0 (n_76), .in1 (S_temp[23]), .outb
       (S[23]));
  mux2$ \u_mux1[6] (.s0 (c16), .in0 (n_77), .in1 (S_temp[22]), .outb
       (S[22]));
  mux2$ \u_mux1[5] (.s0 (c16), .in0 (n_78), .in1 (S_temp[21]), .outb
       (S[21]));
  mux2$ \u_mux1[4] (.s0 (c16), .in0 (n_79), .in1 (S_temp[20]), .outb
       (S[20]));
  mux2$ \u_mux1[3] (.s0 (c16), .in0 (n_80), .in1 (S_temp[19]), .outb
       (S[19]));
  mux2$ \u_mux1[2] (.s0 (c16), .in0 (n_81), .in1 (S_temp[18]), .outb
       (S[18]));
  mux2$ \u_mux1[1] (.s0 (c16), .in0 (n_82), .in1 (S_temp[17]), .outb
       (S[17]));
  mux2$ \u_mux1[0] (.s0 (c16), .in0 (n_83), .in1 (S_temp[16]), .outb
       (S[16]));
  mux2$ u_mux2(.s0 (c16), .in0 (COUT0), .in1 (COUT1), .outb (COUT));
endmodule

module mux_nbit_2x1_N16(a0, a1, sel, out);
  input [15:0] a0, a1;
  input sel;
  output [15:0] out;
  wire [15:0] a0, a1;
  wire sel;
  wire [15:0] out;
  mux2$ \loop.mux_gen[0].u_mux_2x1 (.s0 (sel), .in0 (a0[0]), .in1
       (a1[0]), .outb (out[0]));
  mux2$ \loop.mux_gen[1].u_mux_2x1 (.s0 (sel), .in0 (a0[1]), .in1
       (a1[1]), .outb (out[1]));
  mux2$ \loop.mux_gen[2].u_mux_2x1 (.s0 (sel), .in0 (a0[2]), .in1
       (a1[2]), .outb (out[2]));
  mux2$ \loop.mux_gen[3].u_mux_2x1 (.s0 (sel), .in0 (a0[3]), .in1
       (a1[3]), .outb (out[3]));
  mux2$ \loop.mux_gen[4].u_mux_2x1 (.s0 (sel), .in0 (a0[4]), .in1
       (a1[4]), .outb (out[4]));
  mux2$ \loop.mux_gen[5].u_mux_2x1 (.s0 (sel), .in0 (a0[5]), .in1
       (a1[5]), .outb (out[5]));
  mux2$ \loop.mux_gen[6].u_mux_2x1 (.s0 (sel), .in0 (a0[6]), .in1
       (a1[6]), .outb (out[6]));
  mux2$ \loop.mux_gen[7].u_mux_2x1 (.s0 (sel), .in0 (a0[7]), .in1
       (a1[7]), .outb (out[7]));
  mux2$ \loop.mux_gen[8].u_mux_2x1 (.s0 (sel), .in0 (a0[8]), .in1
       (a1[8]), .outb (out[8]));
  mux2$ \loop.mux_gen[9].u_mux_2x1 (.s0 (sel), .in0 (a0[9]), .in1
       (a1[9]), .outb (out[9]));
  mux2$ \loop.mux_gen[10].u_mux_2x1 (.s0 (sel), .in0 (a0[10]), .in1
       (a1[10]), .outb (out[10]));
  mux2$ \loop.mux_gen[11].u_mux_2x1 (.s0 (sel), .in0 (a0[11]), .in1
       (a1[11]), .outb (out[11]));
  mux2$ \loop.mux_gen[12].u_mux_2x1 (.s0 (sel), .in0 (a0[12]), .in1
       (a1[12]), .outb (out[12]));
  mux2$ \loop.mux_gen[13].u_mux_2x1 (.s0 (sel), .in0 (a0[13]), .in1
       (a1[13]), .outb (out[13]));
  mux2$ \loop.mux_gen[14].u_mux_2x1 (.s0 (sel), .in0 (a0[14]), .in1
       (a1[14]), .outb (out[14]));
  mux2$ \loop.mux_gen[15].u_mux_2x1 (.s0 (sel), .in0 (a0[15]), .in1
       (a1[15]), .outb (out[15]));
endmodule

module mux_nbit_2x1_N64(a0, a1, sel, out);
  input [63:0] a0, a1;
  input sel;
  output [63:0] out;
  wire [63:0] a0, a1;
  wire sel;
  wire [63:0] out;
  mux2$ \loop.mux_gen[0].u_mux_2x1 (.s0 (sel), .in0 (a0[0]), .in1
       (a1[0]), .outb (out[0]));
  mux2$ \loop.mux_gen[1].u_mux_2x1 (.s0 (sel), .in0 (a0[1]), .in1
       (a1[1]), .outb (out[1]));
  mux2$ \loop.mux_gen[2].u_mux_2x1 (.s0 (sel), .in0 (a0[2]), .in1
       (a1[2]), .outb (out[2]));
  mux2$ \loop.mux_gen[3].u_mux_2x1 (.s0 (sel), .in0 (a0[3]), .in1
       (a1[3]), .outb (out[3]));
  mux2$ \loop.mux_gen[4].u_mux_2x1 (.s0 (sel), .in0 (a0[4]), .in1
       (a1[4]), .outb (out[4]));
  mux2$ \loop.mux_gen[5].u_mux_2x1 (.s0 (sel), .in0 (a0[5]), .in1
       (a1[5]), .outb (out[5]));
  mux2$ \loop.mux_gen[6].u_mux_2x1 (.s0 (sel), .in0 (a0[6]), .in1
       (a1[6]), .outb (out[6]));
  mux2$ \loop.mux_gen[7].u_mux_2x1 (.s0 (sel), .in0 (a0[7]), .in1
       (a1[7]), .outb (out[7]));
  mux2$ \loop.mux_gen[8].u_mux_2x1 (.s0 (sel), .in0 (a0[8]), .in1
       (a1[8]), .outb (out[8]));
  mux2$ \loop.mux_gen[9].u_mux_2x1 (.s0 (sel), .in0 (a0[9]), .in1
       (a1[9]), .outb (out[9]));
  mux2$ \loop.mux_gen[10].u_mux_2x1 (.s0 (sel), .in0 (a0[10]), .in1
       (a1[10]), .outb (out[10]));
  mux2$ \loop.mux_gen[11].u_mux_2x1 (.s0 (sel), .in0 (a0[11]), .in1
       (a1[11]), .outb (out[11]));
  mux2$ \loop.mux_gen[12].u_mux_2x1 (.s0 (sel), .in0 (a0[12]), .in1
       (a1[12]), .outb (out[12]));
  mux2$ \loop.mux_gen[13].u_mux_2x1 (.s0 (sel), .in0 (a0[13]), .in1
       (a1[13]), .outb (out[13]));
  mux2$ \loop.mux_gen[14].u_mux_2x1 (.s0 (sel), .in0 (a0[14]), .in1
       (a1[14]), .outb (out[14]));
  mux2$ \loop.mux_gen[15].u_mux_2x1 (.s0 (sel), .in0 (a0[15]), .in1
       (a1[15]), .outb (out[15]));
  mux2$ \loop.mux_gen[16].u_mux_2x1 (.s0 (sel), .in0 (a0[16]), .in1
       (a1[16]), .outb (out[16]));
  mux2$ \loop.mux_gen[17].u_mux_2x1 (.s0 (sel), .in0 (a0[17]), .in1
       (a1[17]), .outb (out[17]));
  mux2$ \loop.mux_gen[18].u_mux_2x1 (.s0 (sel), .in0 (a0[18]), .in1
       (a1[18]), .outb (out[18]));
  mux2$ \loop.mux_gen[19].u_mux_2x1 (.s0 (sel), .in0 (a0[19]), .in1
       (a1[19]), .outb (out[19]));
  mux2$ \loop.mux_gen[20].u_mux_2x1 (.s0 (sel), .in0 (a0[20]), .in1
       (a1[20]), .outb (out[20]));
  mux2$ \loop.mux_gen[21].u_mux_2x1 (.s0 (sel), .in0 (a0[21]), .in1
       (a1[21]), .outb (out[21]));
  mux2$ \loop.mux_gen[22].u_mux_2x1 (.s0 (sel), .in0 (a0[22]), .in1
       (a1[22]), .outb (out[22]));
  mux2$ \loop.mux_gen[23].u_mux_2x1 (.s0 (sel), .in0 (a0[23]), .in1
       (a1[23]), .outb (out[23]));
  mux2$ \loop.mux_gen[24].u_mux_2x1 (.s0 (sel), .in0 (a0[24]), .in1
       (a1[24]), .outb (out[24]));
  mux2$ \loop.mux_gen[25].u_mux_2x1 (.s0 (sel), .in0 (a0[25]), .in1
       (a1[25]), .outb (out[25]));
  mux2$ \loop.mux_gen[26].u_mux_2x1 (.s0 (sel), .in0 (a0[26]), .in1
       (a1[26]), .outb (out[26]));
  mux2$ \loop.mux_gen[27].u_mux_2x1 (.s0 (sel), .in0 (a0[27]), .in1
       (a1[27]), .outb (out[27]));
  mux2$ \loop.mux_gen[28].u_mux_2x1 (.s0 (sel), .in0 (a0[28]), .in1
       (a1[28]), .outb (out[28]));
  mux2$ \loop.mux_gen[29].u_mux_2x1 (.s0 (sel), .in0 (a0[29]), .in1
       (a1[29]), .outb (out[29]));
  mux2$ \loop.mux_gen[30].u_mux_2x1 (.s0 (sel), .in0 (a0[30]), .in1
       (a1[30]), .outb (out[30]));
  mux2$ \loop.mux_gen[31].u_mux_2x1 (.s0 (sel), .in0 (a0[31]), .in1
       (a1[31]), .outb (out[31]));
  mux2$ \loop.mux_gen[32].u_mux_2x1 (.s0 (sel), .in0 (a0[32]), .in1
       (a1[32]), .outb (out[32]));
  mux2$ \loop.mux_gen[33].u_mux_2x1 (.s0 (sel), .in0 (a0[33]), .in1
       (a1[33]), .outb (out[33]));
  mux2$ \loop.mux_gen[34].u_mux_2x1 (.s0 (sel), .in0 (a0[34]), .in1
       (a1[34]), .outb (out[34]));
  mux2$ \loop.mux_gen[35].u_mux_2x1 (.s0 (sel), .in0 (a0[35]), .in1
       (a1[35]), .outb (out[35]));
  mux2$ \loop.mux_gen[36].u_mux_2x1 (.s0 (sel), .in0 (a0[36]), .in1
       (a1[36]), .outb (out[36]));
  mux2$ \loop.mux_gen[37].u_mux_2x1 (.s0 (sel), .in0 (a0[37]), .in1
       (a1[37]), .outb (out[37]));
  mux2$ \loop.mux_gen[38].u_mux_2x1 (.s0 (sel), .in0 (a0[38]), .in1
       (a1[38]), .outb (out[38]));
  mux2$ \loop.mux_gen[39].u_mux_2x1 (.s0 (sel), .in0 (a0[39]), .in1
       (a1[39]), .outb (out[39]));
  mux2$ \loop.mux_gen[40].u_mux_2x1 (.s0 (sel), .in0 (a0[40]), .in1
       (a1[40]), .outb (out[40]));
  mux2$ \loop.mux_gen[41].u_mux_2x1 (.s0 (sel), .in0 (a0[41]), .in1
       (a1[41]), .outb (out[41]));
  mux2$ \loop.mux_gen[42].u_mux_2x1 (.s0 (sel), .in0 (a0[42]), .in1
       (a1[42]), .outb (out[42]));
  mux2$ \loop.mux_gen[43].u_mux_2x1 (.s0 (sel), .in0 (a0[43]), .in1
       (a1[43]), .outb (out[43]));
  mux2$ \loop.mux_gen[44].u_mux_2x1 (.s0 (sel), .in0 (a0[44]), .in1
       (a1[44]), .outb (out[44]));
  mux2$ \loop.mux_gen[45].u_mux_2x1 (.s0 (sel), .in0 (a0[45]), .in1
       (a1[45]), .outb (out[45]));
  mux2$ \loop.mux_gen[46].u_mux_2x1 (.s0 (sel), .in0 (a0[46]), .in1
       (a1[46]), .outb (out[46]));
  mux2$ \loop.mux_gen[47].u_mux_2x1 (.s0 (sel), .in0 (a0[47]), .in1
       (a1[47]), .outb (out[47]));
  mux2$ \loop.mux_gen[48].u_mux_2x1 (.s0 (sel), .in0 (a0[48]), .in1
       (a1[48]), .outb (out[48]));
  mux2$ \loop.mux_gen[49].u_mux_2x1 (.s0 (sel), .in0 (a0[49]), .in1
       (a1[49]), .outb (out[49]));
  mux2$ \loop.mux_gen[50].u_mux_2x1 (.s0 (sel), .in0 (a0[50]), .in1
       (a1[50]), .outb (out[50]));
  mux2$ \loop.mux_gen[51].u_mux_2x1 (.s0 (sel), .in0 (a0[51]), .in1
       (a1[51]), .outb (out[51]));
  mux2$ \loop.mux_gen[52].u_mux_2x1 (.s0 (sel), .in0 (a0[52]), .in1
       (a1[52]), .outb (out[52]));
  mux2$ \loop.mux_gen[53].u_mux_2x1 (.s0 (sel), .in0 (a0[53]), .in1
       (a1[53]), .outb (out[53]));
  mux2$ \loop.mux_gen[54].u_mux_2x1 (.s0 (sel), .in0 (a0[54]), .in1
       (a1[54]), .outb (out[54]));
  mux2$ \loop.mux_gen[55].u_mux_2x1 (.s0 (sel), .in0 (a0[55]), .in1
       (a1[55]), .outb (out[55]));
  mux2$ \loop.mux_gen[56].u_mux_2x1 (.s0 (sel), .in0 (a0[56]), .in1
       (a1[56]), .outb (out[56]));
  mux2$ \loop.mux_gen[57].u_mux_2x1 (.s0 (sel), .in0 (a0[57]), .in1
       (a1[57]), .outb (out[57]));
  mux2$ \loop.mux_gen[58].u_mux_2x1 (.s0 (sel), .in0 (a0[58]), .in1
       (a1[58]), .outb (out[58]));
  mux2$ \loop.mux_gen[59].u_mux_2x1 (.s0 (sel), .in0 (a0[59]), .in1
       (a1[59]), .outb (out[59]));
  mux2$ \loop.mux_gen[60].u_mux_2x1 (.s0 (sel), .in0 (a0[60]), .in1
       (a1[60]), .outb (out[60]));
  mux2$ \loop.mux_gen[61].u_mux_2x1 (.s0 (sel), .in0 (a0[61]), .in1
       (a1[61]), .outb (out[61]));
  mux2$ \loop.mux_gen[62].u_mux_2x1 (.s0 (sel), .in0 (a0[62]), .in1
       (a1[62]), .outb (out[62]));
  mux2$ \loop.mux_gen[63].u_mux_2x1 (.s0 (sel), .in0 (a0[63]), .in1
       (a1[63]), .outb (out[63]));
endmodule

module mux_nbit_4x1_N64(a0, a1, a2, a3, sel, out);
  input [63:0] a0, a1, a2, a3;
  input [1:0] sel;
  output [63:0] out;
  wire [63:0] a0, a1, a2, a3;
  wire [1:0] sel;
  wire [63:0] out;
  mux4$ \loop.mux_gen[0].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[0]), .in1 (a1[0]), .in2 (a2[0]), .in3 (a3[0]), .outb
       (out[0]));
  mux4$ \loop.mux_gen[1].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[1]), .in1 (a1[1]), .in2 (a2[1]), .in3 (a3[1]), .outb
       (out[1]));
  mux4$ \loop.mux_gen[2].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[2]), .in1 (a1[2]), .in2 (a2[2]), .in3 (a3[2]), .outb
       (out[2]));
  mux4$ \loop.mux_gen[3].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[3]), .in1 (a1[3]), .in2 (a2[3]), .in3 (a3[3]), .outb
       (out[3]));
  mux4$ \loop.mux_gen[4].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[4]), .in1 (a1[4]), .in2 (a2[4]), .in3 (a3[4]), .outb
       (out[4]));
  mux4$ \loop.mux_gen[5].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[5]), .in1 (a1[5]), .in2 (a2[5]), .in3 (a3[5]), .outb
       (out[5]));
  mux4$ \loop.mux_gen[6].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[6]), .in1 (a1[6]), .in2 (a2[6]), .in3 (a3[6]), .outb
       (out[6]));
  mux4$ \loop.mux_gen[7].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[7]), .in1 (a1[7]), .in2 (a2[7]), .in3 (a3[7]), .outb
       (out[7]));
  mux4$ \loop.mux_gen[8].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[8]), .in1 (a1[8]), .in2 (a2[8]), .in3 (a3[8]), .outb
       (out[8]));
  mux4$ \loop.mux_gen[9].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[9]), .in1 (a1[9]), .in2 (a2[9]), .in3 (a3[9]), .outb
       (out[9]));
  mux4$ \loop.mux_gen[10].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[10]), .in1 (a1[10]), .in2 (a2[10]), .in3 (a3[10]), .outb
       (out[10]));
  mux4$ \loop.mux_gen[11].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[11]), .in1 (a1[11]), .in2 (a2[11]), .in3 (a3[11]), .outb
       (out[11]));
  mux4$ \loop.mux_gen[12].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[12]), .in1 (a1[12]), .in2 (a2[12]), .in3 (a3[12]), .outb
       (out[12]));
  mux4$ \loop.mux_gen[13].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[13]), .in1 (a1[13]), .in2 (a2[13]), .in3 (a3[13]), .outb
       (out[13]));
  mux4$ \loop.mux_gen[14].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[14]), .in1 (a1[14]), .in2 (a2[14]), .in3 (a3[14]), .outb
       (out[14]));
  mux4$ \loop.mux_gen[15].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[15]), .in1 (a1[15]), .in2 (a2[15]), .in3 (a3[15]), .outb
       (out[15]));
  mux4$ \loop.mux_gen[16].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[16]), .in1 (a1[16]), .in2 (a2[16]), .in3 (a3[16]), .outb
       (out[16]));
  mux4$ \loop.mux_gen[17].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[17]), .in1 (a1[17]), .in2 (a2[17]), .in3 (a3[17]), .outb
       (out[17]));
  mux4$ \loop.mux_gen[18].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[18]), .in1 (a1[18]), .in2 (a2[18]), .in3 (a3[18]), .outb
       (out[18]));
  mux4$ \loop.mux_gen[19].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[19]), .in1 (a1[19]), .in2 (a2[19]), .in3 (a3[19]), .outb
       (out[19]));
  mux4$ \loop.mux_gen[20].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[20]), .in1 (a1[20]), .in2 (a2[20]), .in3 (a3[20]), .outb
       (out[20]));
  mux4$ \loop.mux_gen[21].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[21]), .in1 (a1[21]), .in2 (a2[21]), .in3 (a3[21]), .outb
       (out[21]));
  mux4$ \loop.mux_gen[22].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[22]), .in1 (a1[22]), .in2 (a2[22]), .in3 (a3[22]), .outb
       (out[22]));
  mux4$ \loop.mux_gen[23].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[23]), .in1 (a1[23]), .in2 (a2[23]), .in3 (a3[23]), .outb
       (out[23]));
  mux4$ \loop.mux_gen[24].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[24]), .in1 (a1[24]), .in2 (a2[24]), .in3 (a3[24]), .outb
       (out[24]));
  mux4$ \loop.mux_gen[25].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[25]), .in1 (a1[25]), .in2 (a2[25]), .in3 (a3[25]), .outb
       (out[25]));
  mux4$ \loop.mux_gen[26].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[26]), .in1 (a1[26]), .in2 (a2[26]), .in3 (a3[26]), .outb
       (out[26]));
  mux4$ \loop.mux_gen[27].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[27]), .in1 (a1[27]), .in2 (a2[27]), .in3 (a3[27]), .outb
       (out[27]));
  mux4$ \loop.mux_gen[28].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[28]), .in1 (a1[28]), .in2 (a2[28]), .in3 (a3[28]), .outb
       (out[28]));
  mux4$ \loop.mux_gen[29].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[29]), .in1 (a1[29]), .in2 (a2[29]), .in3 (a3[29]), .outb
       (out[29]));
  mux4$ \loop.mux_gen[30].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[30]), .in1 (a1[30]), .in2 (a2[30]), .in3 (a3[30]), .outb
       (out[30]));
  mux4$ \loop.mux_gen[31].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[31]), .in1 (a1[31]), .in2 (a2[31]), .in3 (a3[31]), .outb
       (out[31]));
  mux4$ \loop.mux_gen[32].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[32]), .in1 (a1[32]), .in2 (a2[32]), .in3 (a3[32]), .outb
       (out[32]));
  mux4$ \loop.mux_gen[33].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[33]), .in1 (a1[33]), .in2 (a2[33]), .in3 (a3[33]), .outb
       (out[33]));
  mux4$ \loop.mux_gen[34].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[34]), .in1 (a1[34]), .in2 (a2[34]), .in3 (a3[34]), .outb
       (out[34]));
  mux4$ \loop.mux_gen[35].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[35]), .in1 (a1[35]), .in2 (a2[35]), .in3 (a3[35]), .outb
       (out[35]));
  mux4$ \loop.mux_gen[36].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[36]), .in1 (a1[36]), .in2 (a2[36]), .in3 (a3[36]), .outb
       (out[36]));
  mux4$ \loop.mux_gen[37].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[37]), .in1 (a1[37]), .in2 (a2[37]), .in3 (a3[37]), .outb
       (out[37]));
  mux4$ \loop.mux_gen[38].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[38]), .in1 (a1[38]), .in2 (a2[38]), .in3 (a3[38]), .outb
       (out[38]));
  mux4$ \loop.mux_gen[39].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[39]), .in1 (a1[39]), .in2 (a2[39]), .in3 (a3[39]), .outb
       (out[39]));
  mux4$ \loop.mux_gen[40].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[40]), .in1 (a1[40]), .in2 (a2[40]), .in3 (a3[40]), .outb
       (out[40]));
  mux4$ \loop.mux_gen[41].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[41]), .in1 (a1[41]), .in2 (a2[41]), .in3 (a3[41]), .outb
       (out[41]));
  mux4$ \loop.mux_gen[42].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[42]), .in1 (a1[42]), .in2 (a2[42]), .in3 (a3[42]), .outb
       (out[42]));
  mux4$ \loop.mux_gen[43].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[43]), .in1 (a1[43]), .in2 (a2[43]), .in3 (a3[43]), .outb
       (out[43]));
  mux4$ \loop.mux_gen[44].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[44]), .in1 (a1[44]), .in2 (a2[44]), .in3 (a3[44]), .outb
       (out[44]));
  mux4$ \loop.mux_gen[45].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[45]), .in1 (a1[45]), .in2 (a2[45]), .in3 (a3[45]), .outb
       (out[45]));
  mux4$ \loop.mux_gen[46].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[46]), .in1 (a1[46]), .in2 (a2[46]), .in3 (a3[46]), .outb
       (out[46]));
  mux4$ \loop.mux_gen[47].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[47]), .in1 (a1[47]), .in2 (a2[47]), .in3 (a3[47]), .outb
       (out[47]));
  mux4$ \loop.mux_gen[48].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[48]), .in1 (a1[48]), .in2 (a2[48]), .in3 (a3[48]), .outb
       (out[48]));
  mux4$ \loop.mux_gen[49].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[49]), .in1 (a1[49]), .in2 (a2[49]), .in3 (a3[49]), .outb
       (out[49]));
  mux4$ \loop.mux_gen[50].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[50]), .in1 (a1[50]), .in2 (a2[50]), .in3 (a3[50]), .outb
       (out[50]));
  mux4$ \loop.mux_gen[51].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[51]), .in1 (a1[51]), .in2 (a2[51]), .in3 (a3[51]), .outb
       (out[51]));
  mux4$ \loop.mux_gen[52].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[52]), .in1 (a1[52]), .in2 (a2[52]), .in3 (a3[52]), .outb
       (out[52]));
  mux4$ \loop.mux_gen[53].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[53]), .in1 (a1[53]), .in2 (a2[53]), .in3 (a3[53]), .outb
       (out[53]));
  mux4$ \loop.mux_gen[54].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[54]), .in1 (a1[54]), .in2 (a2[54]), .in3 (a3[54]), .outb
       (out[54]));
  mux4$ \loop.mux_gen[55].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[55]), .in1 (a1[55]), .in2 (a2[55]), .in3 (a3[55]), .outb
       (out[55]));
  mux4$ \loop.mux_gen[56].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[56]), .in1 (a1[56]), .in2 (a2[56]), .in3 (a3[56]), .outb
       (out[56]));
  mux4$ \loop.mux_gen[57].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[57]), .in1 (a1[57]), .in2 (a2[57]), .in3 (a3[57]), .outb
       (out[57]));
  mux4$ \loop.mux_gen[58].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[58]), .in1 (a1[58]), .in2 (a2[58]), .in3 (a3[58]), .outb
       (out[58]));
  mux4$ \loop.mux_gen[59].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[59]), .in1 (a1[59]), .in2 (a2[59]), .in3 (a3[59]), .outb
       (out[59]));
  mux4$ \loop.mux_gen[60].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[60]), .in1 (a1[60]), .in2 (a2[60]), .in3 (a3[60]), .outb
       (out[60]));
  mux4$ \loop.mux_gen[61].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[61]), .in1 (a1[61]), .in2 (a2[61]), .in3 (a3[61]), .outb
       (out[61]));
  mux4$ \loop.mux_gen[62].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[62]), .in1 (a1[62]), .in2 (a2[62]), .in3 (a3[62]), .outb
       (out[62]));
  mux4$ \loop.mux_gen[63].u_mux_4x1 (.s1 (sel[1]), .s0 (sel[0]), .in0
       (a0[63]), .in1 (a1[63]), .in2 (a2[63]), .in3 (a3[63]), .outb
       (out[63]));
endmodule

module alu3(mm1, mm2, sr2, ecx, alu3_op, alu_res3);
  input [63:0] mm1, mm2;
  input [31:0] sr2, ecx;
  input [4:0] alu3_op;
  output [63:0] alu_res3;
  wire [63:0] mm1, mm2;
  wire [31:0] sr2, ecx;
  wire [4:0] alu3_op;
  wire [63:0] alu_res3;
  wire [63:0] w_pshufw_res;
  wire [63:0] w_paddw_res;
  wire [63:0] w_paddd_res;
  wire [63:0] w_res;
  wire [15:0] msb_sat0;
  wire [15:0] msb_sat1;
  wire [15:0] msb_sat2;
  wire [15:0] msb_sat3;
  wire [63:0] w_paddsw_res;
  wire [31:0] w_ecx_res;
  wire [63:0] mux0_out;
  wire [63:0] mux1_out;
  wire [63:0] mux2_out;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6;
  wire UNCONNECTED7, UNCONNECTED8, UNCONNECTED9, check0, check1,
       check2, check3, msb_sign0;
  wire msb_sign1, msb_sign2, msb_sign3, of0, of1, of2, of3;
  mux_nbit_4x1_N16 shufw0(.a0 (mm2[15:0]), .a1 (mm2[31:16]), .a2
       (mm2[47:32]), .a3 (mm2[63:48]), .sel (sr2[1:0]), .out
       (w_pshufw_res[15:0]));
  mux_nbit_4x1_N16 shufw1(.a0 (mm2[15:0]), .a1 (mm2[31:16]), .a2
       (mm2[47:32]), .a3 (mm2[63:48]), .sel (sr2[3:2]), .out
       (w_pshufw_res[31:16]));
  mux_nbit_4x1_N16 shufw2(.a0 (mm2[15:0]), .a1 (mm2[31:16]), .a2
       (mm2[47:32]), .a3 (mm2[63:48]), .sel (sr2[5:4]), .out
       (w_pshufw_res[47:32]));
  mux_nbit_4x1_N16 shufw3(.a0 (mm2[15:0]), .a1 (mm2[31:16]), .a2
       (mm2[47:32]), .a3 (mm2[63:48]), .sel (sr2[7:6]), .out
       (w_pshufw_res[63:48]));
  cond_sum16 addw0(.A (mm1[15:0]), .B (mm2[15:0]), .CIN (1'b0), .S
       (w_paddw_res[15:0]), .COUT (UNCONNECTED));
  cond_sum16 addw1(.A (mm1[31:16]), .B (mm2[31:16]), .CIN (1'b0), .S
       (w_paddw_res[31:16]), .COUT (UNCONNECTED0));
  cond_sum16 addw2(.A (mm1[47:32]), .B (mm2[47:32]), .CIN (1'b0), .S
       (w_paddw_res[47:32]), .COUT (UNCONNECTED1));
  cond_sum16 addw3(.A (mm1[63:48]), .B (mm2[63:48]), .CIN (1'b0), .S
       (w_paddw_res[63:48]), .COUT (UNCONNECTED2));
  cond_sum32 addd0(.A (mm1[31:0]), .B (mm2[31:0]), .CIN (1'b0), .S
       (w_paddd_res[31:0]), .COUT (UNCONNECTED3));
  cond_sum32 addd1(.A (mm1[63:32]), .B (mm2[63:32]), .CIN (1'b0), .S
       (w_paddd_res[63:32]), .COUT (UNCONNECTED4));
  cond_sum16 addsw0(.A (mm1[15:0]), .B (mm2[15:0]), .CIN (1'b0), .S
       (w_res[15:0]), .COUT (UNCONNECTED5));
  cond_sum16 addsw1(.A (mm1[31:16]), .B (mm2[31:16]), .CIN (1'b0), .S
       (w_res[31:16]), .COUT (UNCONNECTED6));
  cond_sum16 addsw2(.A (mm1[47:32]), .B (mm2[47:32]), .CIN (1'b0), .S
       (w_res[47:32]), .COUT (UNCONNECTED7));
  cond_sum16 addsw3(.A (mm1[63:48]), .B (mm2[63:48]), .CIN (1'b0), .S
       (w_res[63:48]), .COUT (UNCONNECTED8));
  mux_nbit_2x1_N16 sat0(.a0 (16'b0111111111111111), .a1
       (16'b1000000000000000), .sel (mm1[15]), .out (msb_sat0));
  mux_nbit_2x1_N16 sat1(.a0 (16'b0111111111111111), .a1
       (16'b1000000000000000), .sel (mm1[31]), .out (msb_sat1));
  mux_nbit_2x1_N16 sat2(.a0 (16'b0111111111111111), .a1
       (16'b1000000000000000), .sel (mm1[47]), .out (msb_sat2));
  mux_nbit_2x1_N16 sat3(.a0 (16'b0111111111111111), .a1
       (16'b1000000000000000), .sel (mm1[63]), .out (msb_sat3));
  mux_nbit_2x1_N16 mux_sw0(.a0 (msb_sat0), .a1 (w_res[15:0]), .sel
       (of0), .out (w_paddsw_res[15:0]));
  mux_nbit_2x1_N16 mux_sw1(.a0 (msb_sat1), .a1 (w_res[31:16]), .sel
       (of1), .out (w_paddsw_res[31:16]));
  mux_nbit_2x1_N16 mux_sw2(.a0 (msb_sat2), .a1 (w_res[47:32]), .sel
       (of2), .out (w_paddsw_res[47:32]));
  mux_nbit_2x1_N16 mux_sw3(.a0 (msb_sat3), .a1 (w_res[63:48]), .sel
       (of3), .out (w_paddsw_res[63:48]));
  cond_sum32 ecx_dec(.A (ecx), .B
       (32'b11111111111111111111111111111111), .CIN (1'b0), .S
       (w_ecx_res), .COUT (UNCONNECTED9));
  mux_nbit_2x1_N64 mux0(.a0 (mm1), .a1 (mm2), .sel (alu3_op[0]), .out
       (mux0_out));
  mux_nbit_2x1_N64 mux1(.a0 (mux0_out), .a1 (w_pshufw_res), .sel
       (alu3_op[1]), .out (mux1_out));
  mux_nbit_2x1_N64 mux2(.a0 (mux1_out), .a1 (w_paddw_res), .sel
       (alu3_op[2]), .out (mux2_out));
  mux_nbit_4x1_N64 mux_res(.a0 (w_paddd_res), .a1 (w_paddsw_res), .a2
       (mux2_out), .a3 ({32'b00000000000000000000000000000000,
       w_ecx_res}), .sel (alu3_op[4:3]), .out (alu_res3));
  xnor2$ u_msb0(.in0 (mm1[15]), .in1 (mm2[15]), .out (msb_sign0));
  xnor2$ u_msb1(.in0 (mm1[31]), .in1 (mm2[31]), .out (msb_sign1));
  xnor2$ u_msb2(.in0 (mm1[47]), .in1 (mm2[47]), .out (msb_sign2));
  xnor2$ u_msb3(.in0 (mm1[63]), .in1 (mm2[63]), .out (msb_sign3));
  xor2$ u_check0(.in0 (mm1[15]), .in1 (w_res[15]), .out (check0));
  xor2$ u_check1(.in0 (mm1[31]), .in1 (w_res[31]), .out (check1));
  xor2$ u_check2(.in0 (mm1[47]), .in1 (w_res[47]), .out (check2));
  xor2$ u_check3(.in0 (mm1[63]), .in1 (w_res[63]), .out (check3));
  nand2$ u_of0(.in0 (msb_sign0), .in1 (check0), .out (of0));
  nand2$ u_of1(.in0 (msb_sign1), .in1 (check1), .out (of1));
  nand2$ u_of2(.in0 (msb_sign2), .in1 (check2), .out (of2));
  nand2$ u_of3(.in0 (msb_sign3), .in1 (check3), .out (of3));
endmodule

