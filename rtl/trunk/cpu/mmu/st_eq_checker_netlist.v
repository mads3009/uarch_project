
// Generated by Cadence Encounter(R) RTL Compiler RC14.28 - v14.20-s067_1

// Verification Directory fv/st_eq_checker 

module st_eq_checker(curr_st, next_st, count, curr_st_eq_IO_SEL,
     curr_st_eq_IO_ACK_WAIT, curr_st_eq_DC_MEM_RD,
     curr_st_eq_DC_MISS_ACK, curr_st_eq_IC_MEM_RD,
     curr_st_eq_IC_MISS_ACK, curr_st_eq_DC_MEM_WR,
     curr_st_eq_DC_CLEAR_EVICT, next_st_eq_IO_SEL,
     next_st_eq_IO_ACK_WAIT, next_st_eq_DC_MEM_RD,
     next_st_eq_DC_MISS_ACK, next_st_eq_IC_MEM_RD,
     next_st_eq_IC_MISS_ACK, next_st_eq_DC_MEM_WR,
     next_st_eq_DC_CLEAR_EVICT, curr_st_eq_IO_SEL_bar,
     curr_st_eq_IO_ACK_WAIT_bar, curr_st_eq_DC_MEM_RD_bar,
     curr_st_eq_DC_MISS_ACK_bar, curr_st_eq_IC_MEM_RD_bar,
     curr_st_eq_IC_MISS_ACK_bar, curr_st_eq_DC_MEM_WR_bar,
     curr_st_eq_DC_CLEAR_EVICT_bar, count_eq0, count_eq1, count_eq2,
     count_eq3, count_eq4, count_eq5, count_eq6, count_eq7);
  input [2:0] curr_st, next_st, count;
  output curr_st_eq_IO_SEL, curr_st_eq_IO_ACK_WAIT,
       curr_st_eq_DC_MEM_RD, curr_st_eq_DC_MISS_ACK,
       curr_st_eq_IC_MEM_RD, curr_st_eq_IC_MISS_ACK,
       curr_st_eq_DC_MEM_WR, curr_st_eq_DC_CLEAR_EVICT,
       next_st_eq_IO_SEL, next_st_eq_IO_ACK_WAIT, next_st_eq_DC_MEM_RD,
       next_st_eq_DC_MISS_ACK, next_st_eq_IC_MEM_RD,
       next_st_eq_IC_MISS_ACK, next_st_eq_DC_MEM_WR,
       next_st_eq_DC_CLEAR_EVICT, curr_st_eq_IO_SEL_bar,
       curr_st_eq_IO_ACK_WAIT_bar, curr_st_eq_DC_MEM_RD_bar,
       curr_st_eq_DC_MISS_ACK_bar, curr_st_eq_IC_MEM_RD_bar,
       curr_st_eq_IC_MISS_ACK_bar, curr_st_eq_DC_MEM_WR_bar,
       curr_st_eq_DC_CLEAR_EVICT_bar, count_eq0, count_eq1, count_eq2,
       count_eq3, count_eq4, count_eq5, count_eq6, count_eq7;
  wire [2:0] curr_st, next_st, count;
  wire curr_st_eq_IO_SEL, curr_st_eq_IO_ACK_WAIT, curr_st_eq_DC_MEM_RD,
       curr_st_eq_DC_MISS_ACK, curr_st_eq_IC_MEM_RD,
       curr_st_eq_IC_MISS_ACK, curr_st_eq_DC_MEM_WR,
       curr_st_eq_DC_CLEAR_EVICT, next_st_eq_IO_SEL,
       next_st_eq_IO_ACK_WAIT, next_st_eq_DC_MEM_RD,
       next_st_eq_DC_MISS_ACK, next_st_eq_IC_MEM_RD,
       next_st_eq_IC_MISS_ACK, next_st_eq_DC_MEM_WR,
       next_st_eq_DC_CLEAR_EVICT, curr_st_eq_IO_SEL_bar,
       curr_st_eq_IO_ACK_WAIT_bar, curr_st_eq_DC_MEM_RD_bar,
       curr_st_eq_DC_MISS_ACK_bar, curr_st_eq_IC_MEM_RD_bar,
       curr_st_eq_IC_MISS_ACK_bar, curr_st_eq_DC_MEM_WR_bar,
       curr_st_eq_DC_CLEAR_EVICT_bar, count_eq0, count_eq1, count_eq2,
       count_eq3, count_eq4, count_eq5, count_eq6, count_eq7;
  wire n_0, n_1, n_2, n_3, n_6, n_7, n_8, n_19;
  wire n_21, n_22, n_25, n_26, n_29, n_32, n_33, n_36;
  inv1$ g564(.in (curr_st_eq_DC_MISS_ACK_bar), .out
       (curr_st_eq_DC_MISS_ACK));
  inv1$ g581(.in (curr_st_eq_DC_MEM_RD_bar), .out
       (curr_st_eq_DC_MEM_RD));
  inv1$ g565(.in (curr_st_eq_IC_MEM_RD_bar), .out
       (curr_st_eq_IC_MEM_RD));
  inv1$ g579(.in (curr_st_eq_IC_MISS_ACK_bar), .out
       (curr_st_eq_IC_MISS_ACK));
  nand2$ g567(.in0 (n_26), .in1 (curr_st[0]), .out
       (curr_st_eq_DC_MISS_ACK_bar));
  nor2$ g593(.in0 (n_19), .in1 (n_21), .out (next_st_eq_DC_MEM_WR));
  nor2$ g570(.in0 (n_36), .in1 (count[1]), .out (count_eq1));
  nor2$ g572(.in0 (n_36), .in1 (n_32), .out (count_eq3));
  nor2$ g575(.in0 (n_33), .in1 (count[1]), .out (count_eq4));
  nor2$ g583(.in0 (n_33), .in1 (n_32), .out (count_eq6));
  nand2$ g573(.in0 (n_29), .in1 (n_25), .out
       (curr_st_eq_IC_MEM_RD_bar));
  inv1$ g578(.in (curr_st_eq_IO_ACK_WAIT_bar), .out
       (curr_st_eq_IO_ACK_WAIT));
  nand2$ g585(.in0 (n_29), .in1 (curr_st[0]), .out
       (curr_st_eq_IC_MISS_ACK_bar));
  inv1$ g580(.in (curr_st_eq_DC_MEM_WR_bar), .out
       (curr_st_eq_DC_MEM_WR));
  nand2$ g592(.in0 (n_26), .in1 (n_25), .out
       (curr_st_eq_DC_MEM_RD_bar));
  nor2$ g574(.in0 (n_22), .in1 (next_st[1]), .out
       (next_st_eq_IO_ACK_WAIT));
  nor2$ g586(.in0 (n_22), .in1 (n_21), .out (next_st_eq_DC_MISS_ACK));
  nor2$ g589(.in0 (n_19), .in1 (next_st[1]), .out
       (next_st_eq_IC_MEM_RD));
  and2$ g571(.in0 (n_0), .in1 (count[1]), .out (count_eq2));
  nor2$ g591(.in0 (n_1), .in1 (next_st[1]), .out
       (next_st_eq_IC_MISS_ACK));
  nor2$ g576(.in0 (n_2), .in1 (count[1]), .out (count_eq5));
  inv1$ g582(.in (curr_st_eq_DC_CLEAR_EVICT_bar), .out
       (curr_st_eq_DC_CLEAR_EVICT));
  nand3$ g590(.in0 (curr_st[2]), .in1 (n_25), .in2 (curr_st[1]), .out
       (curr_st_eq_DC_MEM_WR_bar));
  or3$ g584(.in0 (curr_st[2]), .in1 (n_25), .in2 (curr_st[1]), .out
       (curr_st_eq_IO_ACK_WAIT_bar));
  inv1$ g563(.in (curr_st_eq_IO_SEL), .out (curr_st_eq_IO_SEL_bar));
  and2$ g577(.in0 (n_3), .in1 (next_st[1]), .out
       (next_st_eq_DC_MEM_RD));
  or2$ g600(.in0 (n_8), .in1 (next_st[0]), .out (n_19));
  and3$ g588(.in0 (next_st[2]), .in1 (next_st[1]), .in2 (next_st[0]),
       .out (next_st_eq_DC_CLEAR_EVICT));
  nor3$ g587(.in0 (count[2]), .in1 (count[1]), .in2 (count[0]), .out
       (count_eq0));
  nand3$ g594(.in0 (curr_st[2]), .in1 (curr_st[0]), .in2 (curr_st[1]),
       .out (curr_st_eq_DC_CLEAR_EVICT_bar));
  nor2$ g595(.in0 (n_6), .in1 (curr_st[2]), .out (n_26));
  nand2$ g596(.in0 (n_7), .in1 (count[0]), .out (n_36));
  nand2$ g597(.in0 (n_8), .in1 (next_st[0]), .out (n_22));
  or2$ g598(.in0 (n_7), .in1 (count[0]), .out (n_33));
  nor3$ g566(.in0 (curr_st[2]), .in1 (curr_st[0]), .in2 (curr_st[1]),
       .out (curr_st_eq_IO_SEL));
  and2$ g599(.in0 (n_6), .in1 (curr_st[2]), .out (n_29));
  nor3$ g569(.in0 (next_st[2]), .in1 (next_st[1]), .in2 (next_st[0]),
       .out (next_st_eq_IO_SEL));
  and3$ g568(.in0 (count[2]), .in1 (count[1]), .in2 (count[0]), .out
       (count_eq7));
  nor2$ g602(.in0 (next_st[2]), .in1 (next_st[0]), .out (n_3));
  nand2$ g603(.in0 (count[2]), .in1 (count[0]), .out (n_2));
  nand2$ g604(.in0 (next_st[2]), .in1 (next_st[0]), .out (n_1));
  nor2$ g601(.in0 (count[2]), .in1 (count[0]), .out (n_0));
  inv1$ g607(.in (next_st[2]), .out (n_8));
  inv1$ g610(.in (count[2]), .out (n_7));
  inv1$ g605(.in (curr_st[0]), .out (n_25));
  inv1$ g606(.in (next_st[1]), .out (n_21));
  inv1$ g609(.in (curr_st[1]), .out (n_6));
  inv1$ g608(.in (count[1]), .out (n_32));
endmodule

